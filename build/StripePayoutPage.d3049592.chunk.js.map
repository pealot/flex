{"version":3,"sources":["containers/StripePayoutPage/StripePayoutPage.js","containers/StripePayoutPage/StripePayoutPage.module.css"],"names":["STRIPE_ONBOARDING_RETURN_URL_SUCCESS","STRIPE_ONBOARDING_RETURN_URL_FAILURE","createReturnURL","returnURLType","rootURL","routes","path","createResourceLocatorString","root","replace","getBankAccountLast4Digits","stripeAccountData","external_accounts","data","length","last4","hasRequirements","requirementType","requirements","Array","isArray","StripePayoutPageComponent","props","getLinkFn","commonParams","currentUser","scrollingDisabled","getAccountLinkInProgress","getAccountLinkError","createStripeAccountError","updateStripeAccountError","fetchStripeAccountError","stripeAccountFetched","stripeAccount","onPayoutDetailsFormChange","onPayoutDetailsFormSubmit","onGetStripeConnectAccountLink","payoutDetailsSaveInProgress","payoutDetailsSaved","params","intl","ensuredCurrentUser","ensureCurrentUser","currentUserLoaded","id","stripeConnected","title","formatMessage","formDisabled","config","canonicalRootURL","routeConfiguration","successURL","failureURL","accountId","attributes","getStripeAccountData","requirementsMissing","savedCountry","country","handleGetStripeConnectAccountLink","type","then","url","window","location","href","catch","err","console","error","returnedAbnormallyFromStripe","showVerificationNeeded","name","currentPage","desktopClassName","css","desktopTopbar","mobileClassName","mobileTopbar","selectedPageName","currentTab","className","content","disabled","inProgress","ready","stripeBankAccountLastDigits","submitButtonText","stripeAccountError","stripeAccountLinkError","onChange","onSubmit","defaultProps","StripePayoutPage","compose","connect","state","stripeConnectAccount","user","isScrollingDisabled","dispatch","stripeAccountClearError","values","isUpdateCall","savePayoutDetails","getStripeConnectAccountLink","injectIntl","module","exports"],"mappings":"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","file":"StripePayoutPage.d3049592.chunk.js","sourcesContent":["import React from 'react';\nimport { bool, func, oneOf, shape } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport routeConfiguration from '../../routeConfiguration';\nimport config from '../../config';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { ensureCurrentUser } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  stripeAccountClearError,\n  getStripeConnectAccountLink,\n} from '../../ducks/stripeConnectAccount.duck';\nimport {\n  NamedRedirect,\n  LayoutSideNavigation,\n  LayoutWrapperMain,\n  LayoutWrapperAccountSettingsSideNav,\n  LayoutWrapperTopbar,\n  LayoutWrapperFooter,\n  Footer,\n  Page,\n  StripeConnectAccountStatusBox,\n  UserNav,\n} from '../../components';\nimport { StripeConnectAccountForm } from '../../forms';\nimport { TopbarContainer } from '..';\nimport { savePayoutDetails } from './StripePayoutPage.duck';\n\nimport css from './StripePayoutPage.module.css';\n\nconst STRIPE_ONBOARDING_RETURN_URL_SUCCESS = 'success';\nconst STRIPE_ONBOARDING_RETURN_URL_FAILURE = 'failure';\nconst STRIPE_ONBOARDING_RETURN_URL_TYPES = [\n  STRIPE_ONBOARDING_RETURN_URL_SUCCESS,\n  STRIPE_ONBOARDING_RETURN_URL_FAILURE,\n];\n\n// Create return URL for the Stripe onboarding form\nconst createReturnURL = (returnURLType, rootURL, routes) => {\n  const path = createResourceLocatorString(\n    'StripePayoutOnboardingPage',\n    routes,\n    { returnURLType },\n    {}\n  );\n  const root = rootURL.replace(/\\/$/, '');\n  return `${root}${path}`;\n};\n\n// Get attribute: stripeAccountData\nconst getStripeAccountData = stripeAccount => stripeAccount.attributes.stripeAccountData || null;\n\n// Get last 4 digits of bank account returned in Stripe account\nconst getBankAccountLast4Digits = stripeAccountData =>\n  stripeAccountData && stripeAccountData.external_accounts.data.length > 0\n    ? stripeAccountData.external_accounts.data[0].last4\n    : null;\n\n// Check if there's requirements on selected type: 'past_due', 'currently_due' etc.\nconst hasRequirements = (stripeAccountData, requirementType) =>\n  stripeAccountData != null &&\n  stripeAccountData.requirements &&\n  Array.isArray(stripeAccountData.requirements[requirementType]) &&\n  stripeAccountData.requirements[requirementType].length > 0;\n\n// Redirect user to Stripe's hosted Connect account onboarding form\nconst handleGetStripeConnectAccountLinkFn = (getLinkFn, commonParams) => type => () => {\n  getLinkFn({ type, ...commonParams })\n    .then(url => {\n      window.location.href = url;\n    })\n    .catch(err => console.error(err));\n};\n\nexport const StripePayoutPageComponent = props => {\n  const {\n    currentUser,\n    scrollingDisabled,\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccountFetched,\n    stripeAccount,\n    onPayoutDetailsFormChange,\n    onPayoutDetailsFormSubmit,\n    onGetStripeConnectAccountLink,\n    payoutDetailsSaveInProgress,\n    payoutDetailsSaved,\n    params,\n    intl,\n  } = props;\n\n  const { returnURLType } = params;\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\n  const currentUserLoaded = !!ensuredCurrentUser.id;\n  const stripeConnected = currentUserLoaded && !!stripeAccount && !!stripeAccount.id;\n\n  const title = intl.formatMessage({ id: 'StripePayoutPage.title' });\n\n  const formDisabled = getAccountLinkInProgress;\n\n  const rootURL = config.canonicalRootURL;\n  const routes = routeConfiguration();\n  const successURL = createReturnURL(STRIPE_ONBOARDING_RETURN_URL_SUCCESS, rootURL, routes);\n  const failureURL = createReturnURL(STRIPE_ONBOARDING_RETURN_URL_FAILURE, rootURL, routes);\n\n  const accountId = stripeConnected ? stripeAccount.id : null;\n  const stripeAccountData = stripeConnected ? getStripeAccountData(stripeAccount) : null;\n  const requirementsMissing =\n    stripeAccount &&\n    (hasRequirements(stripeAccountData, 'past_due') ||\n      hasRequirements(stripeAccountData, 'currently_due'));\n\n  const savedCountry = stripeAccountData ? stripeAccountData.country : null;\n\n  const handleGetStripeConnectAccountLink = handleGetStripeConnectAccountLinkFn(\n    onGetStripeConnectAccountLink,\n    {\n      accountId,\n      successURL,\n      failureURL,\n    }\n  );\n\n  const returnedNormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_SUCCESS;\n  const returnedAbnormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_FAILURE;\n  const showVerificationNeeded = stripeConnected && requirementsMissing;\n\n  // Redirect from success URL to basic path for StripePayoutPage\n  if (returnedNormallyFromStripe && stripeConnected && !requirementsMissing) {\n    return <NamedRedirect name=\"StripePayoutPage\" />;\n  }\n\n  // Failure url should redirect back to Stripe since it's most likely due to page reload\n  // Account link creation will fail if the account is the reason\n  if (returnedAbnormallyFromStripe && !getAccountLinkError) {\n    handleGetStripeConnectAccountLink('custom_account_verification')();\n  }\n\n  return (\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\n      <LayoutSideNavigation>\n        <LayoutWrapperTopbar>\n          <TopbarContainer\n            currentPage=\"StripePayoutPage\"\n            desktopClassName={css.desktopTopbar}\n            mobileClassName={css.mobileTopbar}\n          />\n          <UserNav selectedPageName=\"StripePayoutPage\" />\n        </LayoutWrapperTopbar>\n        <LayoutWrapperAccountSettingsSideNav currentTab=\"StripePayoutPage\" />\n        <LayoutWrapperMain>\n          <div className={css.content}>\n            <h1 className={css.title}>\n              <FormattedMessage id=\"StripePayoutPage.heading\" />\n            </h1>\n            {!currentUserLoaded ? (\n              <FormattedMessage id=\"StripePayoutPage.loadingData\" />\n            ) : returnedAbnormallyFromStripe && !getAccountLinkError ? (\n              <FormattedMessage id=\"StripePayoutPage.redirectingToStripe\" />\n            ) : (\n              <StripeConnectAccountForm\n                disabled={formDisabled}\n                inProgress={payoutDetailsSaveInProgress}\n                ready={payoutDetailsSaved}\n                currentUser={ensuredCurrentUser}\n                stripeBankAccountLastDigits={getBankAccountLast4Digits(stripeAccountData)}\n                savedCountry={savedCountry}\n                submitButtonText={intl.formatMessage({\n                  id: 'StripePayoutPage.submitButtonText',\n                })}\n                stripeAccountError={\n                  createStripeAccountError || updateStripeAccountError || fetchStripeAccountError\n                }\n                stripeAccountLinkError={getAccountLinkError}\n                stripeAccountFetched={stripeAccountFetched}\n                onChange={onPayoutDetailsFormChange}\n                onSubmit={onPayoutDetailsFormSubmit}\n                onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink}\n                stripeConnected={stripeConnected}\n              >\n                {stripeConnected && !returnedAbnormallyFromStripe && showVerificationNeeded ? (\n                  <StripeConnectAccountStatusBox\n                    type=\"verificationNeeded\"\n                    inProgress={getAccountLinkInProgress}\n                    onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink(\n                      'custom_account_verification'\n                    )}\n                  />\n                ) : stripeConnected && savedCountry && !returnedAbnormallyFromStripe ? (\n                  <StripeConnectAccountStatusBox\n                    type=\"verificationSuccess\"\n                    inProgress={getAccountLinkInProgress}\n                    disabled={payoutDetailsSaveInProgress}\n                    onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink(\n                      'custom_account_update'\n                    )}\n                  />\n                ) : null}\n              </StripeConnectAccountForm>\n            )}\n          </div>\n        </LayoutWrapperMain>\n        <LayoutWrapperFooter>\n          <Footer />\n        </LayoutWrapperFooter>\n      </LayoutSideNavigation>\n    </Page>\n  );\n};\n\nStripePayoutPageComponent.defaultProps = {\n  currentUser: null,\n  createStripeAccountError: null,\n  updateStripeAccountError: null,\n  fetchStripeAccountError: null,\n  getAccountLinkError: null,\n  stripeAccount: null,\n  params: {\n    returnURLType: null,\n  },\n};\n\nStripePayoutPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  getAccountLinkInProgress: bool.isRequired,\n  payoutDetailsSaveInProgress: bool.isRequired,\n  createStripeAccountError: propTypes.error,\n  getAccountLinkError: propTypes.error,\n  updateStripeAccountError: propTypes.error,\n  fetchStripeAccountError: propTypes.error,\n  stripeAccount: propTypes.stripeAccount,\n  stripeAccountFetched: bool.isRequired,\n  payoutDetailsSaved: bool.isRequired,\n\n  onPayoutDetailsFormChange: func.isRequired,\n  onPayoutDetailsFormSubmit: func.isRequired,\n  onGetStripeConnectAccountLink: func.isRequired,\n  params: shape({\n    returnURLType: oneOf(STRIPE_ONBOARDING_RETURN_URL_TYPES),\n  }),\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const {\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccount,\n    stripeAccountFetched,\n  } = state.stripeConnectAccount;\n  const { currentUser } = state.user;\n  const { payoutDetailsSaveInProgress, payoutDetailsSaved } = state.StripePayoutPage;\n  return {\n    currentUser,\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccount,\n    stripeAccountFetched,\n    payoutDetailsSaveInProgress,\n    payoutDetailsSaved,\n    scrollingDisabled: isScrollingDisabled(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onPayoutDetailsFormChange: () => dispatch(stripeAccountClearError()),\n  onPayoutDetailsFormSubmit: (values, isUpdateCall) =>\n    dispatch(savePayoutDetails(values, isUpdateCall)),\n  onGetStripeConnectAccountLink: params => dispatch(getStripeConnectAccountLink(params)),\n});\n\nconst StripePayoutPage = compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(StripePayoutPageComponent);\n\nexport default StripePayoutPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"StripePayoutPage_content__1V_Ty\",\"desktopTopbar\":\"StripePayoutPage_desktopTopbar__lqqHT\",\"mobileTopbar\":\"StripePayoutPage_mobileTopbar__3t5kw\",\"title\":\"StripePayoutPage_title__3frv_\"};"],"sourceRoot":""}