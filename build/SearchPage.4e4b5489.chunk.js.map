{"version":3,"sources":["containers/SearchPage/SearchPage.helpers.js","containers/SearchPage/FilterComponent.js","containers/SearchPage/MainPanel.js","containers/SearchPage/SearchPage.js","containers/SearchPage/SearchPage.module.css"],"names":["flatten","acc","val","concat","validURLParamForExtendedData","queryParamName","paramValueRaw","filters","filterConfig","find","f","Array","isArray","queryParamNames","includes","paramValue","toString","config","min","max","type","allowedValues","options","map","o","key","searchMode","valueArray","parseSelectFilterOptions","validValues","intersection","join","length","split","v","validFilterParams","params","filterParamNames","reduce","Object","entries","validParams","entry","paramName","pickSearchParamsOnly","sortConfig","origin","address","bounds","rest","boundsMaybe","originMaybe","sortSearchByDistance","filterParams","sort","sortMaybe","FilterComponent","props","idPrefix","initialValues","urlQueryParams","getHandleChangedValueFn","id","label","liveEdit","showAsPopup","useHistoryPush","componentId","toLowerCase","name","replace","onSelect","onSubmit","cleanSearchFromConflictingParams","searchParams","isAnyFilterActive","conflictingFilters","MainPanel","state","isSecondaryFiltersOpen","currentQueryParams","applyFilters","bind","cancelFilters","resetAll","handleSortBy","this","history","search","push","createResourceLocatorString","routeConfiguration","setState","e","filterQueryParamNames","queryParams","omit","currentQueryParam","getInitialValue","updatedURLParams","prevState","mergedQueryParams","urlParam","values","className","rootClassName","listings","searchInProgress","searchListingsError","searchParamsAreInSync","onActivateListing","onManageDisableScrolling","onOpenModal","onCloseModal","onMapIconClick","pagination","searchParamsForPagination","showAsModalMaxWidth","primaryFilters","filter","group","secondaryFilters","hasSecondaryFilters","selectedFilters","selectedFiltersCount","keys","selectedSecondaryFilters","selectedSecondaryFiltersCount","propsForSecondaryFiltersToggle","toggleSecondaryFiltersOpen","isOpen","hasPaginationInfo","totalItems","listingsAreLoaded","sortBy","mode","conflictingFilterActive","mobileClassesMaybe","css","menuLabelRootClassName","sortByMenuLabel","active","isConflictingFilterActive","contentPlacementOffset","classes","classNames","searchResultContainer","searchFiltersPrimary","sortByComponent","resultsCount","searchFiltersMobile","searchFiltersPanel","onClosePanel","newSearchInProgress","error","searchListingsPanel","setActiveListing","Component","defaultProps","custom","SearchPageComponent","isSearchMapOpenOnMobile","tab","isMobileModalOpen","searchMapListingsInProgress","onMapMoveEnd","debounce","onOpenMobileModal","onCloseMobileModal","viewportBoundsChanged","data","viewportBounds","viewportCenter","routes","searchPagePath","pathByRouteName","currentPath","window","location","pathname","parse","latlng","latlngBounds","mapSearch","intl","mapListings","scrollingDisabled","activeListingId","searchInURL","page","stringify","validQueryParams","validURLParamsForExtendedData","isMobileLayout","innerWidth","shouldShowSearchMap","siteTitle","searchAddress","formatMessage","schemaDescription","schemaTitle","schemaListings","l","i","title","attributes","pathToItem","uuid","slug","createSlug","position","url","canonicalRootURL","description","schema","mainEntity","JSON","itemListOrder","itemListElement","createSearchResultSchema","topbarClasses","topbarBehindModal","topbar","currentPage","currentSearchParams","container","useLocationSearchBounds","mapPanel","isModalOpenOnMobile","onClose","mapWrapper","reusableContainerClassName","center","onCloseAsModal","messages","SearchPage","compose","withRouter","connect","currentPageResultIds","searchMapListingIds","getListingsById","unionWith","id1","id2","isScrollingDisabled","dispatch","disableScrolling","manageDisableScrolling","onSearchMapListings","searchMapListings","listingId","injectIntl","module","exports"],"mappings":"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","file":"SearchPage.4e4b5489.chunk.js","sourcesContent":["import intersection from 'lodash/intersection';\nimport config from '../../config';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { parseSelectFilterOptions } from '../../util/search';\nimport { createSlug } from '../../util/urlHelpers';\nimport routeConfiguration from '../../routeConfiguration';\n\nconst flatten = (acc, val) => acc.concat(val);\n\n/**\n * Validates a filter search param agains a filters configuration.\n *\n * All invalid param names and values are dropped\n *\n * @param {String} queryParamName Search parameter name\n * @param {Object} paramValue Search parameter value\n * @param {Object} filters Filters configuration\n */\nexport const validURLParamForExtendedData = (queryParamName, paramValueRaw, filters) => {\n  // Resolve configuration for this filter\n  const filterConfig = filters.find(f => {\n    const isArray = Array.isArray(f.queryParamNames);\n    return isArray\n      ? f.queryParamNames.includes(queryParamName)\n      : f.queryParamNames === queryParamName;\n  });\n\n  const paramValue = paramValueRaw.toString();\n\n  if (filterConfig) {\n    const { min, max } = filterConfig.config || {};\n\n    if (['SelectSingleFilter', 'SelectMultipleFilter'].includes(filterConfig.type)) {\n      // Pick valid select options only\n      const allowedValues = filterConfig.config.options.map(o => o.key);\n      const searchMode = filterConfig.config.searchMode;\n      const valueArray = parseSelectFilterOptions(paramValue);\n      const validValues = intersection(valueArray, allowedValues).join(',');\n\n      return validValues.length > 0\n        ? { [queryParamName]: searchMode ? `${searchMode}:${validValues}` : validValues }\n        : {};\n    } else if (filterConfig.type === 'PriceFilter') {\n      // Restrict price range to correct min & max\n      const valueArray = paramValue ? paramValue.split(',') : [];\n      const validValues = valueArray.map(v => {\n        return v < min ? min : v > max ? max : v;\n      });\n      return validValues.length === 2 ? { [queryParamName]: validValues.join(',') } : {};\n    } else if (filterConfig) {\n      // Generic filter - remove empty params\n      return paramValue.length > 0 ? { [queryParamName]: paramValue } : {};\n    }\n  }\n  return {};\n};\n\n/**\n * Checks filter param value validity.\n *\n * Non-filter params are dropped.\n *\n * @param {Object} params Search params\n * @param {Object} filters Filters configuration\n */\nexport const validFilterParams = (params, filters) => {\n  const filterParamNames = filters.map(f => f.queryParamNames).reduce(flatten, []);\n  const paramEntries = Object.entries(params);\n\n  return paramEntries.reduce((validParams, entry) => {\n    const [paramName, paramValue] = entry;\n\n    return filterParamNames.includes(paramName)\n      ? {\n          ...validParams,\n          ...validURLParamForExtendedData(paramName, paramValue, filters),\n        }\n      : { ...validParams };\n  }, {});\n};\n\n/**\n * Checks filter param value validity.\n *\n * Non-filter params are returned as they are.\n *\n * @param {Object} params Search params\n * @param {Object} filters Filters configuration\n */\nexport const validURLParamsForExtendedData = (params, filters) => {\n  const filterParamNames = filters.map(f => f.queryParamNames).reduce(flatten, []);\n  const paramEntries = Object.entries(params);\n\n  return paramEntries.reduce((validParams, entry) => {\n    const [paramName, paramValue] = entry;\n\n    return filterParamNames.includes(paramName)\n      ? {\n          ...validParams,\n          ...validURLParamForExtendedData(paramName, paramValue, filters),\n        }\n      : { ...validParams, [paramName]: paramValue };\n  }, {});\n};\n\n// extract search parameters, including a custom URL params\n// which are validated by mapping the values to marketplace custom config.\nexport const pickSearchParamsOnly = (params, filters, sortConfig) => {\n  const { address, origin, bounds, ...rest } = params || {};\n  const boundsMaybe = bounds ? { bounds } : {};\n  const originMaybe = config.sortSearchByDistance && origin ? { origin } : {};\n  const filterParams = validFilterParams(rest, filters);\n  const sort = rest[sortConfig.queryParamName];\n  const sortMaybe = sort ? { sort } : {};\n\n  return {\n    ...boundsMaybe,\n    ...originMaybe,\n    ...filterParams,\n    ...sortMaybe,\n  };\n};\n\nexport const createSearchResultSchema = (listings, address, intl) => {\n  // Schema for search engines (helps them to understand what this page is about)\n  // http://schema.org\n  // We are using JSON-LD format\n  const siteTitle = config.siteTitle;\n  const searchAddress = address || intl.formatMessage({ id: 'SearchPage.schemaMapSearch' });\n  const schemaDescription = intl.formatMessage({ id: 'SearchPage.schemaDescription' });\n  const schemaTitle = intl.formatMessage(\n    { id: 'SearchPage.schemaTitle' },\n    { searchAddress, siteTitle }\n  );\n\n  const schemaListings = listings.map((l, i) => {\n    const title = l.attributes.title;\n    const pathToItem = createResourceLocatorString('ListingPage', routeConfiguration(), {\n      id: l.id.uuid,\n      slug: createSlug(title),\n    });\n    return {\n      '@type': 'ListItem',\n      position: i,\n      url: `${config.canonicalRootURL}${pathToItem}`,\n      name: title,\n    };\n  });\n\n  const schemaMainEntity = JSON.stringify({\n    '@type': 'ItemList',\n    name: searchAddress,\n    itemListOrder: 'http://schema.org/ItemListOrderAscending',\n    itemListElement: schemaListings,\n  });\n  return {\n    title: schemaTitle,\n    description: schemaDescription,\n    schema: {\n      '@context': 'http://schema.org',\n      '@type': 'SearchResultsPage',\n      description: schemaDescription,\n      name: schemaTitle,\n      mainEntity: [schemaMainEntity],\n    },\n  };\n};\n","import React from 'react';\nimport {\n  BookingDateRangeFilter,\n  PriceFilter,\n  KeywordFilter,\n  SelectSingleFilter,\n  SelectMultipleFilter,\n} from '../../components';\n\n/**\n * FilterComponent is used to map configured filter types\n * to actual filter components\n */\nconst FilterComponent = props => {\n  const {\n    idPrefix,\n    filterConfig,\n    urlQueryParams,\n    initialValues,\n    getHandleChangedValueFn,\n    ...rest\n  } = props;\n  const { id, type, queryParamNames, label, config } = filterConfig;\n  const { liveEdit, showAsPopup } = rest;\n\n  const useHistoryPush = liveEdit || showAsPopup;\n  const prefix = idPrefix || 'SearchPage';\n  const componentId = `${prefix}.${id.toLowerCase()}`;\n  const name = id.replace(/\\s+/g, '-').toLowerCase();\n\n  switch (type) {\n    case 'SelectSingleFilter': {\n      return (\n        <SelectSingleFilter\n          id={componentId}\n          label={label}\n          queryParamNames={queryParamNames}\n          initialValues={initialValues(queryParamNames)}\n          onSelect={getHandleChangedValueFn(useHistoryPush)}\n          {...config}\n          {...rest}\n        />\n      );\n    }\n    case 'SelectMultipleFilter': {\n      return (\n        <SelectMultipleFilter\n          id={componentId}\n          label={label}\n          name={name}\n          queryParamNames={queryParamNames}\n          initialValues={initialValues(queryParamNames)}\n          onSubmit={getHandleChangedValueFn(useHistoryPush)}\n          {...config}\n          {...rest}\n        />\n      );\n    }\n    case 'BookingDateRangeFilter': {\n      return (\n        <BookingDateRangeFilter\n          id={componentId}\n          label={label}\n          queryParamNames={queryParamNames}\n          initialValues={initialValues(queryParamNames)}\n          onSubmit={getHandleChangedValueFn(useHistoryPush)}\n          {...config}\n          {...rest}\n        />\n      );\n    }\n    case 'PriceFilter': {\n      return (\n        <PriceFilter\n          id={componentId}\n          label={label}\n          queryParamNames={queryParamNames}\n          initialValues={initialValues(queryParamNames)}\n          onSubmit={getHandleChangedValueFn(useHistoryPush)}\n          {...config}\n          {...rest}\n        />\n      );\n    }\n    case 'KeywordFilter':\n      return (\n        <KeywordFilter\n          id={componentId}\n          label={label}\n          name={name}\n          queryParamNames={queryParamNames}\n          initialValues={initialValues(queryParamNames)}\n          onSubmit={getHandleChangedValueFn(useHistoryPush)}\n          {...config}\n          {...rest}\n        />\n      );\n    default:\n      return null;\n  }\n};\n\nexport default FilterComponent;\n","import React, { Component } from 'react';\nimport { array, bool, func, number, object, shape, string } from 'prop-types';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport config from '../../config';\nimport routeConfiguration from '../../routeConfiguration';\nimport { FormattedMessage } from '../../util/reactIntl';\nimport { createResourceLocatorString } from '../../util/routes';\nimport { isAnyFilterActive } from '../../util/search';\nimport { propTypes } from '../../util/types';\nimport {\n  SearchResultsPanel,\n  SearchFiltersMobile,\n  SearchFiltersPrimary,\n  SearchFiltersSecondary,\n  SortBy,\n} from '../../components';\n\nimport FilterComponent from './FilterComponent';\nimport { validFilterParams } from './SearchPage.helpers';\n\nimport css from './SearchPage.module.css';\n\n// Primary filters have their content in dropdown-popup.\n// With this offset we move the dropdown to the left a few pixels on desktop layout.\nconst FILTER_DROPDOWN_OFFSET = -14;\n\nconst cleanSearchFromConflictingParams = (searchParams, sortConfig, filterConfig) => {\n  // Single out filters that should disable SortBy when an active\n  // keyword search sorts the listings according to relevance.\n  // In those cases, sort parameter should be removed.\n  const sortingFiltersActive = isAnyFilterActive(\n    sortConfig.conflictingFilters,\n    searchParams,\n    filterConfig\n  );\n  return sortingFiltersActive\n    ? { ...searchParams, [sortConfig.queryParamName]: null }\n    : searchParams;\n};\n\n/**\n * MainPanel contains search results and filters.\n * There are 3 presentational container-components that show filters:\n * SearchfiltersMobile, SearchFiltersPrimary, and SearchFiltersSecondary.\n * The last 2 are for desktop layout.\n */\nclass MainPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isSecondaryFiltersOpen: false, currentQueryParams: props.urlQueryParams };\n\n    this.applyFilters = this.applyFilters.bind(this);\n    this.cancelFilters = this.cancelFilters.bind(this);\n    this.resetAll = this.resetAll.bind(this);\n\n    this.initialValues = this.initialValues.bind(this);\n    this.getHandleChangedValueFn = this.getHandleChangedValueFn.bind(this);\n\n    // SortBy\n    this.handleSortBy = this.handleSortBy.bind(this);\n  }\n\n  // Apply the filters by redirecting to SearchPage with new filters.\n  applyFilters() {\n    const { history, urlQueryParams, sortConfig, filterConfig } = this.props;\n    const searchParams = { ...urlQueryParams, ...this.state.currentQueryParams };\n    const search = cleanSearchFromConflictingParams(searchParams, sortConfig, filterConfig);\n\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, search));\n  }\n\n  // Close the filters by clicking cancel, revert to the initial params\n  cancelFilters() {\n    this.setState({ currentQueryParams: {} });\n  }\n\n  // Reset all filter query parameters\n  resetAll(e) {\n    const { urlQueryParams, history, filterConfig } = this.props;\n    const filterQueryParamNames = filterConfig.map(f => f.queryParamNames);\n\n    // Reset state\n    this.setState({ currentQueryParams: {} });\n\n    // Reset routing params\n    const queryParams = omit(urlQueryParams, filterQueryParamNames);\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams));\n  }\n\n  initialValues(queryParamNames) {\n    // Query parameters that are visible in the URL\n    const urlQueryParams = this.props.urlQueryParams;\n    // Query parameters that are in state (user might have not yet clicked \"Apply\")\n    const currentQueryParams = this.state.currentQueryParams;\n\n    // Get initial value for a given parameter from state if its there.\n    const getInitialValue = paramName => {\n      const currentQueryParam = currentQueryParams[paramName];\n      const hasQueryParamInState = typeof currentQueryParam !== 'undefined';\n      return hasQueryParamInState ? currentQueryParam : urlQueryParams[paramName];\n    };\n\n    // Return all the initial values related to given queryParamNames\n    // InitialValues for \"amenities\" filter could be\n    // { amenities: \"has_any:towel,jacuzzi\" }\n    const isArray = Array.isArray(queryParamNames);\n    return isArray\n      ? queryParamNames.reduce((acc, paramName) => {\n          return { ...acc, [paramName]: getInitialValue(paramName) };\n        }, {})\n      : {};\n  }\n\n  getHandleChangedValueFn(useHistoryPush) {\n    const { urlQueryParams, history, sortConfig, filterConfig } = this.props;\n\n    return updatedURLParams => {\n      const updater = prevState => {\n        const { address, bounds } = urlQueryParams;\n        const mergedQueryParams = { ...urlQueryParams, ...prevState.currentQueryParams };\n\n        // Address and bounds are handled outside of MainPanel.\n        // I.e. TopbarSearchForm && search by moving the map.\n        // We should always trust urlQueryParams with those.\n        return {\n          currentQueryParams: { ...mergedQueryParams, ...updatedURLParams, address, bounds },\n        };\n      };\n\n      const callback = () => {\n        if (useHistoryPush) {\n          const searchParams = this.state.currentQueryParams;\n          const search = cleanSearchFromConflictingParams(searchParams, sortConfig, filterConfig);\n          history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, search));\n        }\n      };\n\n      this.setState(updater, callback);\n    };\n  }\n\n  handleSortBy(urlParam, values) {\n    const { history, urlQueryParams } = this.props;\n    const queryParams = values\n      ? { ...urlQueryParams, [urlParam]: values }\n      : omit(urlQueryParams, urlParam);\n\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration(), {}, queryParams));\n  }\n\n  render() {\n    const {\n      className,\n      rootClassName,\n      urlQueryParams,\n      listings,\n      searchInProgress,\n      searchListingsError,\n      searchParamsAreInSync,\n      onActivateListing,\n      onManageDisableScrolling,\n      onOpenModal,\n      onCloseModal,\n      onMapIconClick,\n      pagination,\n      searchParamsForPagination,\n      showAsModalMaxWidth,\n      filterConfig,\n      sortConfig,\n    } = this.props;\n\n    const primaryFilters = filterConfig.filter(f => f.group === 'primary');\n    const secondaryFilters = filterConfig.filter(f => f.group !== 'primary');\n    const hasSecondaryFilters = !!(secondaryFilters && secondaryFilters.length > 0);\n\n    // Selected aka active filters\n    const selectedFilters = validFilterParams(urlQueryParams, filterConfig);\n    const selectedFiltersCount = Object.keys(selectedFilters).length;\n\n    // Selected aka active secondary filters\n    const selectedSecondaryFilters = hasSecondaryFilters\n      ? validFilterParams(urlQueryParams, secondaryFilters)\n      : {};\n    const selectedSecondaryFiltersCount = Object.keys(selectedSecondaryFilters).length;\n\n    const isSecondaryFiltersOpen = !!hasSecondaryFilters && this.state.isSecondaryFiltersOpen;\n    const propsForSecondaryFiltersToggle = hasSecondaryFilters\n      ? {\n          isSecondaryFiltersOpen: this.state.isSecondaryFiltersOpen,\n          toggleSecondaryFiltersOpen: isOpen => {\n            this.setState({ isSecondaryFiltersOpen: isOpen });\n          },\n          selectedSecondaryFiltersCount,\n        }\n      : {};\n\n    const hasPaginationInfo = !!pagination && pagination.totalItems != null;\n    const totalItems = searchParamsAreInSync && hasPaginationInfo ? pagination.totalItems : 0;\n    const listingsAreLoaded = !searchInProgress && searchParamsAreInSync && hasPaginationInfo;\n\n    const sortBy = mode => {\n      const conflictingFilterActive = isAnyFilterActive(\n        sortConfig.conflictingFilters,\n        urlQueryParams,\n        filterConfig\n      );\n\n      const mobileClassesMaybe =\n        mode === 'mobile'\n          ? {\n              rootClassName: css.sortBy,\n              menuLabelRootClassName: css.sortByMenuLabel,\n            }\n          : {};\n      return sortConfig.active ? (\n        <SortBy\n          {...mobileClassesMaybe}\n          sort={urlQueryParams[sortConfig.queryParamName]}\n          isConflictingFilterActive={!!conflictingFilterActive}\n          onSelect={this.handleSortBy}\n          showAsPopup\n          contentPlacementOffset={FILTER_DROPDOWN_OFFSET}\n        />\n      ) : null;\n    };\n\n    const classes = classNames(rootClassName || css.searchResultContainer, className);\n\n    return (\n      <div className={classes}>\n        <SearchFiltersPrimary\n          className={css.searchFiltersPrimary}\n          sortByComponent={sortBy('desktop')}\n          listingsAreLoaded={listingsAreLoaded}\n          resultsCount={totalItems}\n          searchInProgress={searchInProgress}\n          searchListingsError={searchListingsError}\n          {...propsForSecondaryFiltersToggle}\n        >\n          {primaryFilters.map(config => {\n            return (\n              <FilterComponent\n                key={`SearchFiltersPrimary.${config.id}`}\n                idPrefix=\"SearchFiltersPrimary\"\n                filterConfig={config}\n                urlQueryParams={urlQueryParams}\n                initialValues={this.initialValues}\n                getHandleChangedValueFn={this.getHandleChangedValueFn}\n                showAsPopup\n                contentPlacementOffset={FILTER_DROPDOWN_OFFSET}\n              />\n            );\n          })}\n        </SearchFiltersPrimary>\n        <SearchFiltersMobile\n          className={css.searchFiltersMobile}\n          urlQueryParams={urlQueryParams}\n          sortByComponent={sortBy('mobile')}\n          listingsAreLoaded={listingsAreLoaded}\n          resultsCount={totalItems}\n          searchInProgress={searchInProgress}\n          searchListingsError={searchListingsError}\n          showAsModalMaxWidth={showAsModalMaxWidth}\n          onMapIconClick={onMapIconClick}\n          onManageDisableScrolling={onManageDisableScrolling}\n          onOpenModal={onOpenModal}\n          onCloseModal={onCloseModal}\n          resetAll={this.resetAll}\n          selectedFiltersCount={selectedFiltersCount}\n        >\n          {filterConfig.map(config => {\n            return (\n              <FilterComponent\n                key={`SearchFiltersMobile.${config.id}`}\n                idPrefix=\"SearchFiltersMobile\"\n                filterConfig={config}\n                urlQueryParams={urlQueryParams}\n                initialValues={this.initialValues}\n                getHandleChangedValueFn={this.getHandleChangedValueFn}\n                liveEdit\n                showAsPopup={false}\n              />\n            );\n          })}\n        </SearchFiltersMobile>\n        {isSecondaryFiltersOpen ? (\n          <div className={classNames(css.searchFiltersPanel)}>\n            <SearchFiltersSecondary\n              urlQueryParams={urlQueryParams}\n              listingsAreLoaded={listingsAreLoaded}\n              applyFilters={this.applyFilters}\n              cancelFilters={this.cancelFilters}\n              resetAll={this.resetAll}\n              onClosePanel={() => this.setState({ isSecondaryFiltersOpen: false })}\n            >\n              {secondaryFilters.map(config => {\n                return (\n                  <FilterComponent\n                    key={`SearchFiltersSecondary.${config.id}`}\n                    idPrefix=\"SearchFiltersSecondary\"\n                    filterConfig={config}\n                    urlQueryParams={urlQueryParams}\n                    initialValues={this.initialValues}\n                    getHandleChangedValueFn={this.getHandleChangedValueFn}\n                    showAsPopup={false}\n                  />\n                );\n              })}\n            </SearchFiltersSecondary>\n          </div>\n        ) : (\n          <div\n            className={classNames(css.listings, {\n              [css.newSearchInProgress]: !listingsAreLoaded,\n            })}\n          >\n            {searchListingsError ? (\n              <h2 className={css.error}>\n                <FormattedMessage id=\"SearchPage.searchError\" />\n              </h2>\n            ) : null}\n            <SearchResultsPanel\n              className={css.searchListingsPanel}\n              listings={listings}\n              pagination={listingsAreLoaded ? pagination : null}\n              search={searchParamsForPagination}\n              setActiveListing={onActivateListing}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nMainPanel.defaultProps = {\n  className: null,\n  rootClassName: null,\n  listings: [],\n  resultsCount: 0,\n  pagination: null,\n  searchParamsForPagination: {},\n  filterConfig: config.custom.filters,\n  sortConfig: config.custom.sortConfig,\n};\n\nMainPanel.propTypes = {\n  className: string,\n  rootClassName: string,\n\n  urlQueryParams: object.isRequired,\n  listings: array,\n  searchInProgress: bool.isRequired,\n  searchListingsError: propTypes.error,\n  searchParamsAreInSync: bool.isRequired,\n  onActivateListing: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onOpenModal: func.isRequired,\n  onCloseModal: func.isRequired,\n  onMapIconClick: func.isRequired,\n  pagination: propTypes.pagination,\n  searchParamsForPagination: object,\n  showAsModalMaxWidth: number.isRequired,\n  filterConfig: propTypes.filterConfig,\n  sortConfig: propTypes.sortConfig,\n\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n};\n\nexport default MainPanel;\n","import React, { Component } from 'react';\nimport { array, bool, func, oneOf, object, shape, string } from 'prop-types';\nimport { injectIntl, intlShape } from '../../util/reactIntl';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\nimport unionWith from 'lodash/unionWith';\nimport classNames from 'classnames';\nimport config from '../../config';\nimport routeConfiguration from '../../routeConfiguration';\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\nimport { parse, stringify } from '../../util/urlHelpers';\nimport { propTypes } from '../../util/types';\nimport { getListingsById } from '../../ducks/marketplaceData.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\nimport { SearchMap, ModalInMobile, Page } from '../../components';\nimport { TopbarContainer } from '../../containers';\n\nimport { searchMapListings, setActiveListing } from './SearchPage.duck';\nimport {\n  pickSearchParamsOnly,\n  validURLParamsForExtendedData,\n  validFilterParams,\n  createSearchResultSchema,\n} from './SearchPage.helpers';\nimport MainPanel from './MainPanel';\nimport css from './SearchPage.module.css';\n\nconst MODAL_BREAKPOINT = 768; // Search is in modal on mobile layout\nconst SEARCH_WITH_MAP_DEBOUNCE = 300; // Little bit of debounce before search is initiated.\n\nexport class SearchPageComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isSearchMapOpenOnMobile: props.tab === 'map',\n      isMobileModalOpen: false,\n    };\n\n    this.searchMapListingsInProgress = false;\n\n    this.onMapMoveEnd = debounce(this.onMapMoveEnd.bind(this), SEARCH_WITH_MAP_DEBOUNCE);\n    this.onOpenMobileModal = this.onOpenMobileModal.bind(this);\n    this.onCloseMobileModal = this.onCloseMobileModal.bind(this);\n  }\n\n  // Callback to determine if new search is needed\n  // when map is moved by user or viewport has changed\n  onMapMoveEnd(viewportBoundsChanged, data) {\n    const { viewportBounds, viewportCenter } = data;\n\n    const routes = routeConfiguration();\n    const searchPagePath = pathByRouteName('SearchPage', routes);\n    const currentPath =\n      typeof window !== 'undefined' && window.location && window.location.pathname;\n\n    // When using the ReusableMapContainer onMapMoveEnd can fire from other pages than SearchPage too\n    const isSearchPage = currentPath === searchPagePath;\n\n    // If mapSearch url param is given\n    // or original location search is rendered once,\n    // we start to react to \"mapmoveend\" events by generating new searches\n    // (i.e. 'moveend' event in Mapbox and 'bounds_changed' in Google Maps)\n    if (viewportBoundsChanged && isSearchPage) {\n      const { history, location, filterConfig } = this.props;\n\n      // parse query parameters, including a custom attribute named category\n      const { address, bounds, mapSearch, ...rest } = parse(location.search, {\n        latlng: ['origin'],\n        latlngBounds: ['bounds'],\n      });\n\n      //const viewportMapCenter = SearchMap.getMapCenter(map);\n      const originMaybe = config.sortSearchByDistance ? { origin: viewportCenter } : {};\n\n      const searchParams = {\n        address,\n        ...originMaybe,\n        bounds: viewportBounds,\n        mapSearch: true,\n        ...validFilterParams(rest, filterConfig),\n      };\n\n      history.push(createResourceLocatorString('SearchPage', routes, {}, searchParams));\n    }\n  }\n\n  // Invoked when a modal is opened from a child component,\n  // for example when a filter modal is opened in mobile view\n  onOpenMobileModal() {\n    this.setState({ isMobileModalOpen: true });\n  }\n\n  // Invoked when a modal is closed from a child component,\n  // for example when a filter modal is opened in mobile view\n  onCloseMobileModal() {\n    this.setState({ isMobileModalOpen: false });\n  }\n\n  render() {\n    const {\n      intl,\n      listings,\n      filterConfig,\n      sortConfig,\n      history,\n      location,\n      mapListings,\n      onManageDisableScrolling,\n      pagination,\n      scrollingDisabled,\n      searchInProgress,\n      searchListingsError,\n      searchParams,\n      activeListingId,\n      onActivateListing,\n    } = this.props;\n    // eslint-disable-next-line no-unused-vars\n    const { mapSearch, page, ...searchInURL } = parse(location.search, {\n      latlng: ['origin'],\n      latlngBounds: ['bounds'],\n    });\n\n    // urlQueryParams doesn't contain page specific url params\n    // like mapSearch, page or origin (origin depends on config.sortSearchByDistance)\n    const urlQueryParams = pickSearchParamsOnly(searchInURL, filterConfig, sortConfig);\n\n    // Page transition might initially use values from previous search\n    const urlQueryString = stringify(urlQueryParams);\n    const paramsQueryString = stringify(\n      pickSearchParamsOnly(searchParams, filterConfig, sortConfig)\n    );\n    const searchParamsAreInSync = urlQueryString === paramsQueryString;\n\n    const validQueryParams = validURLParamsForExtendedData(searchInURL, filterConfig);\n\n    const isWindowDefined = typeof window !== 'undefined';\n    const isMobileLayout = isWindowDefined && window.innerWidth < MODAL_BREAKPOINT;\n    const shouldShowSearchMap =\n      !isMobileLayout || (isMobileLayout && this.state.isSearchMapOpenOnMobile);\n\n    const onMapIconClick = () => {\n      this.useLocationSearchBounds = true;\n      this.setState({ isSearchMapOpenOnMobile: true });\n    };\n\n    const { address, bounds, origin } = searchInURL || {};\n    const { title, description, schema } = createSearchResultSchema(listings, address, intl);\n\n    // Set topbar class based on if a modal is open in\n    // a child component\n    const topbarClasses = this.state.isMobileModalOpen\n      ? classNames(css.topbarBehindModal, css.topbar)\n      : css.topbar;\n\n    // N.B. openMobileMap button is sticky.\n    // For some reason, stickyness doesn't work on Safari, if the element is <button>\n    return (\n      <Page\n        scrollingDisabled={scrollingDisabled}\n        description={description}\n        title={title}\n        schema={schema}\n      >\n        <TopbarContainer\n          className={topbarClasses}\n          currentPage=\"SearchPage\"\n          currentSearchParams={urlQueryParams}\n        />\n        <div className={css.container}>\n          <MainPanel\n            urlQueryParams={validQueryParams}\n            listings={listings}\n            searchInProgress={searchInProgress}\n            searchListingsError={searchListingsError}\n            searchParamsAreInSync={searchParamsAreInSync}\n            onActivateListing={onActivateListing}\n            onManageDisableScrolling={onManageDisableScrolling}\n            onOpenModal={this.onOpenMobileModal}\n            onCloseModal={this.onCloseMobileModal}\n            onMapIconClick={onMapIconClick}\n            pagination={pagination}\n            searchParamsForPagination={parse(location.search)}\n            showAsModalMaxWidth={MODAL_BREAKPOINT}\n            history={history}\n          />\n          <ModalInMobile\n            className={css.mapPanel}\n            id=\"SearchPage.map\"\n            isModalOpenOnMobile={this.state.isSearchMapOpenOnMobile}\n            onClose={() => this.setState({ isSearchMapOpenOnMobile: false })}\n            showAsModalMaxWidth={MODAL_BREAKPOINT}\n            onManageDisableScrolling={onManageDisableScrolling}\n          >\n            <div className={css.mapWrapper}>\n              {shouldShowSearchMap ? (\n                <SearchMap\n                  reusableContainerClassName={css.map}\n                  activeListingId={activeListingId}\n                  bounds={bounds}\n                  center={origin}\n                  isSearchMapOpenOnMobile={this.state.isSearchMapOpenOnMobile}\n                  location={location}\n                  listings={mapListings || []}\n                  onMapMoveEnd={this.onMapMoveEnd}\n                  onCloseAsModal={() => {\n                    onManageDisableScrolling('SearchPage.map', false);\n                  }}\n                  messages={intl.messages}\n                />\n              ) : null}\n            </div>\n          </ModalInMobile>\n        </div>\n      </Page>\n    );\n  }\n}\n\nSearchPageComponent.defaultProps = {\n  listings: [],\n  mapListings: [],\n  pagination: null,\n  searchListingsError: null,\n  searchParams: {},\n  tab: 'listings',\n  filterConfig: config.custom.filters,\n  sortConfig: config.custom.sortConfig,\n  activeListingId: null,\n};\n\nSearchPageComponent.propTypes = {\n  listings: array,\n  mapListings: array,\n  onActivateListing: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onSearchMapListings: func.isRequired,\n  pagination: propTypes.pagination,\n  scrollingDisabled: bool.isRequired,\n  searchInProgress: bool.isRequired,\n  searchListingsError: propTypes.error,\n  searchParams: object,\n  tab: oneOf(['filters', 'listings', 'map']).isRequired,\n  filterConfig: propTypes.filterConfig,\n  sortConfig: propTypes.sortConfig,\n\n  // from withRouter\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n  location: shape({\n    search: string.isRequired,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const {\n    currentPageResultIds,\n    pagination,\n    searchInProgress,\n    searchListingsError,\n    searchParams,\n    searchMapListingIds,\n    activeListingId,\n  } = state.SearchPage;\n  const pageListings = getListingsById(state, currentPageResultIds);\n  const mapListings = getListingsById(\n    state,\n    unionWith(currentPageResultIds, searchMapListingIds, (id1, id2) => id1.uuid === id2.uuid)\n  );\n\n  return {\n    listings: pageListings,\n    mapListings,\n    pagination,\n    scrollingDisabled: isScrollingDisabled(state),\n    searchInProgress,\n    searchListingsError,\n    searchParams,\n    activeListingId,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onManageDisableScrolling: (componentId, disableScrolling) =>\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\n  onSearchMapListings: searchParams => dispatch(searchMapListings(searchParams)),\n  onActivateListing: listingId => dispatch(setActiveListing(listingId)),\n});\n\n// Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\nconst SearchPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(SearchPageComponent);\n\nexport default SearchPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topbarBehindModal\":\"SearchPage_topbarBehindModal__12Ldz\",\"topbar\":\"SearchPage_topbar__1vurt\",\"container\":\"SearchPage_container__36fyJ\",\"searchResultContainer\":\"SearchPage_searchResultContainer__r7p9S\",\"error\":\"SearchPage_error__3S-cH\",\"searchString\":\"SearchPage_searchString__1NNuT\",\"searchFiltersPrimary\":\"SearchPage_searchFiltersPrimary__sQise\",\"searchFiltersMobile\":\"SearchPage_searchFiltersMobile__3QbRR\",\"searchFiltersPanel\":\"SearchPage_searchFiltersPanel__1nxJ4\",\"listings\":\"SearchPage_listings__3HG7L\",\"newSearchInProgress\":\"SearchPage_newSearchInProgress__17J8i\",\"searchListingsPanel\":\"SearchPage_searchListingsPanel__rhIJ4\",\"mapPanel\":\"SearchPage_mapPanel__1V-MU\",\"sortBy\":\"SearchPage_sortBy__1Efn8\",\"sortByMenuLabel\":\"SearchPage_sortByMenuLabel__gYdtO\",\"mapWrapper\":\"SearchPage_mapWrapper__3eJov\",\"map\":\"SearchPage_map__3mJ6t\"};"],"sourceRoot":""}