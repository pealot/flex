{"version":3,"sources":["containers/EditListingPage/EditListingPage.module.css","containers/EditListingPage/EditListingPage.js"],"names":["module","exports","UUID","sdkTypes","EditListingPageComponent","props","currentUser","createStripeAccountError","fetchInProgress","fetchStripeAccountError","getOwnListing","getAccountLinkError","getAccountLinkInProgress","history","intl","onFetchAvailabilityExceptions","onCreateAvailabilityException","onDeleteAvailabilityException","onFetchBookings","onCreateListingDraft","onPublishListingDraft","onUpdateListing","onImageUpload","onRemoveListingImage","onManageDisableScrolling","onPayoutDetailsFormSubmit","onPayoutDetailsFormChange","onGetStripeConnectAccountLink","onUpdateImageOrder","onChange","page","params","scrollingDisabled","stripeAccountFetched","stripeAccount","updateStripeAccountError","id","type","returnURLType","isNewURI","LISTING_PAGE_PARAM_TYPE_NEW","isDraftURI","LISTING_PAGE_PARAM_TYPE_DRAFT","isNewListingFlow","listingId","submittedListingId","currentListing","ensureOwnListing","currentListingState","attributes","state","isPastDraft","LISTING_STATE_DRAFT","shouldRedirect","showForm","isPendingApproval","LISTING_STATE_PENDING_APPROVAL","listingSlug","createSlug","title","redirectProps","name","uuid","slug","variant","LISTING_PAGE_PENDING_APPROVAL_VARIANT","createListingDraftError","publishListingError","updateListingError","showListingsError","uploadImageError","errors","newListingPublished","disableForm","redirectToListing","currentListingImages","images","unattachedImages","imageOrder","map","i","allImages","concat","removedImageIds","filter","img","includes","formatMessage","className","css","topbar","mobileRootClassName","mobileTopbar","desktopClassName","desktopTopbar","mobileClassName","wizard","disabled","listing","availability","calendar","availabilityCalendar","onPayoutDetailsSubmit","onRemoveImage","stripeOnboardingReturnURL","updatedTab","updateInProgress","createListingDraftInProgress","payoutDetailsSaveInProgress","payoutDetailsSaved","stripeAccountError","stripeAccountLinkError","defaultProps","currentUserHasOrders","listingDraft","notificationCount","sendVerificationEmailError","EditListingPage","compose","withRouter","connect","stripeConnectAccount","createStripeAccountInProgress","user","listings","getMarketplaceEntities","length","isScrollingDisabled","dispatch","tab","values","requestUpdateListing","requestFetchBookings","requestFetchAvailabilityExceptions","requestCreateAvailabilityException","requestDeleteAvailabilityException","requestCreateListingDraft","requestPublishListingDraft","data","requestImageUpload","componentId","disableScrolling","manageDisableScrolling","stripeAccountClearError","createStripeAccount","isUpdateCall","savePayoutDetails","getStripeConnectAccountLink","updateImageOrder","imageId","removeListingImage","clearUpdatedTab","injectIntl"],"mappings":"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","file":"static/js/EditListingPage.d9abf9ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"topbar\":\"EditListingPage_topbar__17q1k\",\"mobileTopbar\":\"EditListingPage_mobileTopbar__1wjD7\",\"desktopTopbar\":\"EditListingPage_desktopTopbar__4WuxY\",\"wizard\":\"EditListingPage_wizard__RpO1q\"};","import React from 'react';\nimport { bool, func, object, shape, string, oneOf } from 'prop-types';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { intlShape, injectIntl } from '../../util/reactIntl';\nimport { connect } from 'react-redux';\nimport { types as sdkTypes } from '../../util/sdkLoader';\nimport {\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\n  LISTING_PAGE_PARAM_TYPE_NEW,\n  LISTING_PAGE_PARAM_TYPES,\n  LISTING_PAGE_PENDING_APPROVAL_VARIANT,\n  createSlug,\n} from '../../util/urlHelpers';\nimport { LISTING_STATE_DRAFT, LISTING_STATE_PENDING_APPROVAL, propTypes } from '../../util/types';\nimport { ensureOwnListing } from '../../util/data';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  stripeAccountClearError,\n  createStripeAccount,\n  getStripeConnectAccountLink,\n} from '../../ducks/stripeConnectAccount.duck';\n\nimport { EditListingWizard, NamedRedirect, Page } from '../../components';\nimport { TopbarContainer } from '../../containers';\n\nimport {\n  requestFetchBookings,\n  requestFetchAvailabilityExceptions,\n  requestCreateAvailabilityException,\n  requestDeleteAvailabilityException,\n  requestCreateListingDraft,\n  requestPublishListingDraft,\n  requestUpdateListing,\n  requestImageUpload,\n  updateImageOrder,\n  removeListingImage,\n  clearUpdatedTab,\n  savePayoutDetails,\n} from './EditListingPage.duck';\n\nimport css from './EditListingPage.module.css';\n\nconst STRIPE_ONBOARDING_RETURN_URL_SUCCESS = 'success';\nconst STRIPE_ONBOARDING_RETURN_URL_FAILURE = 'failure';\nconst STRIPE_ONBOARDING_RETURN_URL_TYPES = [\n  STRIPE_ONBOARDING_RETURN_URL_SUCCESS,\n  STRIPE_ONBOARDING_RETURN_URL_FAILURE,\n];\n\nconst { UUID } = sdkTypes;\n\n// N.B. All the presentational content needs to be extracted to their own components\nexport const EditListingPageComponent = props => {\n  const {\n    currentUser,\n    createStripeAccountError,\n    fetchInProgress,\n    fetchStripeAccountError,\n    getOwnListing,\n    getAccountLinkError,\n    getAccountLinkInProgress,\n    history,\n    intl,\n    onFetchAvailabilityExceptions,\n    onCreateAvailabilityException,\n    onDeleteAvailabilityException,\n    onFetchBookings,\n    onCreateListingDraft,\n    onPublishListingDraft,\n    onUpdateListing,\n    onImageUpload,\n    onRemoveListingImage,\n    onManageDisableScrolling,\n    onPayoutDetailsFormSubmit,\n    onPayoutDetailsFormChange,\n    onGetStripeConnectAccountLink,\n    onUpdateImageOrder,\n    onChange,\n    page,\n    params,\n    scrollingDisabled,\n    stripeAccountFetched,\n    stripeAccount,\n    updateStripeAccountError,\n  } = props;\n\n  const { id, type, returnURLType } = params;\n  const isNewURI = type === LISTING_PAGE_PARAM_TYPE_NEW;\n  const isDraftURI = type === LISTING_PAGE_PARAM_TYPE_DRAFT;\n  const isNewListingFlow = isNewURI || isDraftURI;\n\n  const listingId = page.submittedListingId || (id ? new UUID(id) : null);\n  const currentListing = ensureOwnListing(getOwnListing(listingId));\n  const { state: currentListingState } = currentListing.attributes;\n\n  const isPastDraft = currentListingState && currentListingState !== LISTING_STATE_DRAFT;\n  const shouldRedirect = isNewListingFlow && listingId && isPastDraft;\n\n  const hasStripeOnboardingDataIfNeeded = returnURLType ? !!(currentUser && currentUser.id) : true;\n  const showForm = hasStripeOnboardingDataIfNeeded && (isNewURI || currentListing.id);\n\n  if (shouldRedirect) {\n    const isPendingApproval =\n      currentListing && currentListingState === LISTING_STATE_PENDING_APPROVAL;\n\n    // If page has already listingId (after submit) and current listings exist\n    // redirect to listing page\n    const listingSlug = currentListing ? createSlug(currentListing.attributes.title) : null;\n\n    const redirectProps = isPendingApproval\n      ? {\n          name: 'ListingPageVariant',\n          params: {\n            id: listingId.uuid,\n            slug: listingSlug,\n            variant: LISTING_PAGE_PENDING_APPROVAL_VARIANT,\n          },\n        }\n      : {\n          name: 'ListingPage',\n          params: {\n            id: listingId.uuid,\n            slug: listingSlug,\n          },\n        };\n\n    return <NamedRedirect {...redirectProps} />;\n  } else if (showForm) {\n    const {\n      createListingDraftError = null,\n      publishListingError = null,\n      updateListingError = null,\n      showListingsError = null,\n      uploadImageError = null,\n    } = page;\n    const errors = {\n      createListingDraftError,\n      publishListingError,\n      updateListingError,\n      showListingsError,\n      uploadImageError,\n      createStripeAccountError,\n    };\n    // TODO: is this dead code? (shouldRedirect is checked before)\n    const newListingPublished =\n      isDraftURI && currentListing && currentListingState !== LISTING_STATE_DRAFT;\n\n    // Show form if user is posting a new listing or editing existing one\n    const disableForm = page.redirectToListing && !showListingsError;\n\n    // Images are passed to EditListingForm so that it can generate thumbnails out of them\n    const currentListingImages =\n      currentListing && currentListing.images ? currentListing.images : [];\n\n    // Images not yet connected to the listing\n    const imageOrder = page.imageOrder || [];\n    const unattachedImages = imageOrder.map(i => page.images[i]);\n\n    const allImages = currentListingImages.concat(unattachedImages);\n    const removedImageIds = page.removedImageIds || [];\n    const images = allImages.filter(img => {\n      return !removedImageIds.includes(img.id);\n    });\n\n    const title = isNewListingFlow\n      ? intl.formatMessage({ id: 'EditListingPage.titleCreateListing' })\n      : intl.formatMessage({ id: 'EditListingPage.titleEditListing' });\n\n    return (\n      <Page title={title} scrollingDisabled={scrollingDisabled}>\n        <TopbarContainer\n          className={css.topbar}\n          mobileRootClassName={css.mobileTopbar}\n          desktopClassName={css.desktopTopbar}\n          mobileClassName={css.mobileTopbar}\n        />\n        <EditListingWizard\n          id=\"EditListingWizard\"\n          className={css.wizard}\n          params={params}\n          disabled={disableForm}\n          errors={errors}\n          fetchInProgress={fetchInProgress}\n          newListingPublished={newListingPublished}\n          history={history}\n          images={images}\n          listing={currentListing}\n          availability={{\n            calendar: page.availabilityCalendar,\n            onFetchAvailabilityExceptions,\n            onCreateAvailabilityException,\n            onDeleteAvailabilityException,\n            onFetchBookings,\n          }}\n          onUpdateListing={onUpdateListing}\n          onCreateListingDraft={onCreateListingDraft}\n          onPublishListingDraft={onPublishListingDraft}\n          onPayoutDetailsFormChange={onPayoutDetailsFormChange}\n          onPayoutDetailsSubmit={onPayoutDetailsFormSubmit}\n          onGetStripeConnectAccountLink={onGetStripeConnectAccountLink}\n          getAccountLinkInProgress={getAccountLinkInProgress}\n          onImageUpload={onImageUpload}\n          onUpdateImageOrder={onUpdateImageOrder}\n          onRemoveImage={onRemoveListingImage}\n          onChange={onChange}\n          currentUser={currentUser}\n          onManageDisableScrolling={onManageDisableScrolling}\n          stripeOnboardingReturnURL={params.returnURLType}\n          updatedTab={page.updatedTab}\n          updateInProgress={page.updateInProgress || page.createListingDraftInProgress}\n          payoutDetailsSaveInProgress={page.payoutDetailsSaveInProgress}\n          payoutDetailsSaved={page.payoutDetailsSaved}\n          stripeAccountFetched={stripeAccountFetched}\n          stripeAccount={stripeAccount}\n          stripeAccountError={\n            createStripeAccountError || updateStripeAccountError || fetchStripeAccountError\n          }\n          stripeAccountLinkError={getAccountLinkError}\n        />\n      </Page>\n    );\n  } else {\n    // If user has come to this page through a direct linkto edit existing listing,\n    // we need to load it first.\n    const loadingPageMsg = {\n      id: 'EditListingPage.loadingListingData',\n    };\n    return (\n      <Page title={intl.formatMessage(loadingPageMsg)} scrollingDisabled={scrollingDisabled} />\n    );\n  }\n};\n\nEditListingPageComponent.defaultProps = {\n  createStripeAccountError: null,\n  fetchStripeAccountError: null,\n  getAccountLinkError: null,\n  getAccountLinkInProgress: null,\n  stripeAccountFetched: null,\n  currentUser: null,\n  stripeAccount: null,\n  currentUserHasOrders: null,\n  listing: null,\n  listingDraft: null,\n  notificationCount: 0,\n  sendVerificationEmailError: null,\n};\n\nEditListingPageComponent.propTypes = {\n  createStripeAccountError: propTypes.error,\n  fetchStripeAccountError: propTypes.error,\n  getAccountLinkError: propTypes.error,\n  getAccountLinkInProgress: bool,\n  updateStripeAccountError: propTypes.error,\n  currentUser: propTypes.currentUser,\n  fetchInProgress: bool.isRequired,\n  getOwnListing: func.isRequired,\n  onFetchAvailabilityExceptions: func.isRequired,\n  onCreateAvailabilityException: func.isRequired,\n  onDeleteAvailabilityException: func.isRequired,\n  onFetchBookings: func.isRequired,\n  onGetStripeConnectAccountLink: func.isRequired,\n  onCreateListingDraft: func.isRequired,\n  onPublishListingDraft: func.isRequired,\n  onImageUpload: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n  onPayoutDetailsFormChange: func.isRequired,\n  onPayoutDetailsFormSubmit: func.isRequired,\n  onUpdateImageOrder: func.isRequired,\n  onRemoveListingImage: func.isRequired,\n  onUpdateListing: func.isRequired,\n  onChange: func.isRequired,\n  page: object.isRequired,\n  params: shape({\n    id: string.isRequired,\n    slug: string.isRequired,\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\n    tab: string.isRequired,\n    returnURLType: oneOf(STRIPE_ONBOARDING_RETURN_URL_TYPES),\n  }).isRequired,\n  stripeAccountFetched: bool,\n  stripeAccount: object,\n  scrollingDisabled: bool.isRequired,\n\n  /* from withRouter */\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n\n  /* from injectIntl */\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const page = state.EditListingPage;\n  const {\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountInProgress,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccount,\n    stripeAccountFetched,\n  } = state.stripeConnectAccount;\n\n  const { currentUser } = state.user;\n\n  const fetchInProgress = createStripeAccountInProgress;\n\n  const getOwnListing = id => {\n    const listings = getMarketplaceEntities(state, [{ id, type: 'ownListing' }]);\n\n    return listings.length === 1 ? listings[0] : null;\n  };\n  return {\n    getAccountLinkInProgress,\n    getAccountLinkError,\n    createStripeAccountError,\n    updateStripeAccountError,\n    fetchStripeAccountError,\n    stripeAccount,\n    stripeAccountFetched,\n    currentUser,\n    fetchInProgress,\n    getOwnListing,\n    page,\n    scrollingDisabled: isScrollingDisabled(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onUpdateListing: (tab, values) => dispatch(requestUpdateListing(tab, values)),\n  onFetchBookings: params => dispatch(requestFetchBookings(params)),\n  onFetchAvailabilityExceptions: params => dispatch(requestFetchAvailabilityExceptions(params)),\n  onCreateAvailabilityException: params => dispatch(requestCreateAvailabilityException(params)),\n  onDeleteAvailabilityException: params => dispatch(requestDeleteAvailabilityException(params)),\n  onCreateListingDraft: values => dispatch(requestCreateListingDraft(values)),\n  onPublishListingDraft: listingId => dispatch(requestPublishListingDraft(listingId)),\n  onImageUpload: data => dispatch(requestImageUpload(data)),\n  onManageDisableScrolling: (componentId, disableScrolling) =>\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\n  onPayoutDetailsFormChange: () => dispatch(stripeAccountClearError()),\n  onPayoutDetailsSubmit: values => dispatch(createStripeAccount(values)),\n  onPayoutDetailsFormSubmit: (values, isUpdateCall) =>\n    dispatch(savePayoutDetails(values, isUpdateCall)),\n  onGetStripeConnectAccountLink: params => dispatch(getStripeConnectAccountLink(params)),\n  onUpdateImageOrder: imageOrder => dispatch(updateImageOrder(imageOrder)),\n  onRemoveListingImage: imageId => dispatch(removeListingImage(imageId)),\n  onChange: () => dispatch(clearUpdatedTab()),\n});\n\n// Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\nconst EditListingPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )\n)(injectIntl(EditListingPageComponent));\n\nexport default EditListingPage;\n"],"sourceRoot":""}