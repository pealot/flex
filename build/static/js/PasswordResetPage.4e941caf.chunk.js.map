{"version":3,"sources":["containers/PasswordResetPage/PasswordResetPage.module.css","containers/PasswordResetPage/PasswordResetPage.js"],"names":["module","exports","PasswordResetPageComponent","props","state","newPasswordSubmitted","content","this","intl","scrollingDisabled","location","resetPasswordInProgress","resetPasswordError","onSubmitPassword","title","formatMessage","id","params","parse","search","token","t","email","e","parseUrlParams","paramsValid","recoveryLink","name","paramsErrorContent","className","css","values","resetFormContent","modalIcon","modalTitle","modalMessage","error","form","onSubmit","password","setState","then","inProgress","resetDoneContent","submitButton","referrer","layoutWrapperMain","root","Component","defaultProps","PropTypes","bool","func","shape","string","PasswordResetPage","compose","withRouter","connect","isScrollingDisabled","dispatch","resetPassword","injectIntl"],"mappings":"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","file":"static/js/PasswordResetPage.4e941caf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"layoutWrapperMain\":\"PasswordResetPage_layoutWrapperMain__Kn7Cz\",\"root\":\"PasswordResetPage_root__3qzlK\",\"content\":\"PasswordResetPage_content__2EQMm\",\"form\":\"PasswordResetPage_form__1I0Xp\",\"error\":\"PasswordResetPage_error__2XznN\",\"modalTitle\":\"PasswordResetPage_modalTitle__3iXow\",\"modalMessage\":\"PasswordResetPage_modalMessage__3q8zo\",\"email\":\"PasswordResetPage_email__j4obo\",\"helperLink\":\"PasswordResetPage_helperLink__2768J\",\"helperText\":\"PasswordResetPage_helperText__Hw6Qh\",\"submitButton\":\"PasswordResetPage_submitButton__1b-hI\",\"modalIcon\":\"PasswordResetPage_modalIcon__3QsAz\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport { parse } from '../../util/urlHelpers';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  Page,\n  NamedLink,\n  IconKeys,\n  IconKeysSuccess,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n} from '../../components';\nimport { PasswordResetForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\n\nimport { resetPassword } from './PasswordResetPage.duck';\nimport css from './PasswordResetPage.module.css';\n\nconst parseUrlParams = location => {\n  const params = parse(location.search);\n  const { t: token, e: email } = params;\n  return { token, email };\n};\n\nexport class PasswordResetPageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { newPasswordSubmitted: false };\n  }\n  render() {\n    const {\n      intl,\n      scrollingDisabled,\n      location,\n      resetPasswordInProgress,\n      resetPasswordError,\n      onSubmitPassword,\n    } = this.props;\n\n    const title = intl.formatMessage({\n      id: 'PasswordResetPage.title',\n    });\n\n    const { token, email } = parseUrlParams(location);\n    const paramsValid = !!(token && email);\n\n    const handleSubmit = values => {\n      const { password } = values;\n      this.setState({ newPasswordSubmitted: false });\n      onSubmitPassword(email, token, password).then(() => {\n        this.setState({ newPasswordSubmitted: true });\n      });\n    };\n\n    const recoveryLink = (\n      <NamedLink name=\"PasswordRecoveryPage\">\n        <FormattedMessage id=\"PasswordResetPage.recoveryLinkText\" />\n      </NamedLink>\n    );\n    const paramsErrorContent = (\n      <div className={css.content}>\n        <p>\n          <FormattedMessage id=\"PasswordResetPage.invalidUrlParams\" values={{ recoveryLink }} />\n        </p>\n      </div>\n    );\n\n    const resetFormContent = (\n      <div className={css.content}>\n        <IconKeys className={css.modalIcon} />\n        <h1 className={css.modalTitle}>\n          <FormattedMessage id=\"PasswordResetPage.mainHeading\" />\n        </h1>\n        <p className={css.modalMessage}>\n          <FormattedMessage id=\"PasswordResetPage.helpText\" />\n        </p>\n        {resetPasswordError ? (\n          <p className={css.error}>\n            <FormattedMessage id=\"PasswordResetPage.resetFailed\" />\n          </p>\n        ) : null}\n        <PasswordResetForm\n          className={css.form}\n          onSubmit={handleSubmit}\n          inProgress={resetPasswordInProgress}\n        />\n      </div>\n    );\n\n    const resetDoneContent = (\n      <div className={css.content}>\n        <IconKeysSuccess className={css.modalIcon} />\n        <h1 className={css.modalTitle}>\n          <FormattedMessage id=\"PasswordResetPage.passwordChangedHeading\" />\n        </h1>\n        <p className={css.modalMessage}>\n          <FormattedMessage id=\"PasswordResetPage.passwordChangedHelpText\" />\n        </p>\n        <NamedLink name=\"LoginPage\" className={css.submitButton}>\n          <FormattedMessage id=\"PasswordResetPage.loginButtonText\" />\n        </NamedLink>\n      </div>\n    );\n\n    let content;\n\n    if (!paramsValid) {\n      content = paramsErrorContent;\n    } else if (!resetPasswordError && this.state.newPasswordSubmitted) {\n      content = resetDoneContent;\n    } else {\n      content = resetFormContent;\n    }\n\n    return (\n      <Page title={title} scrollingDisabled={scrollingDisabled} referrer=\"origin\">\n        <LayoutSingleColumn>\n          <LayoutWrapperTopbar>\n            <TopbarContainer />\n          </LayoutWrapperTopbar>\n          <LayoutWrapperMain className={css.layoutWrapperMain}>\n            <div className={css.root}>{content}</div>\n          </LayoutWrapperMain>\n          <LayoutWrapperFooter>\n            <Footer />\n          </LayoutWrapperFooter>\n        </LayoutSingleColumn>\n      </Page>\n    );\n  }\n}\n\nPasswordResetPageComponent.defaultProps = {\n  resetPasswordError: null,\n};\n\nconst { bool, func, shape, string } = PropTypes;\n\nPasswordResetPageComponent.propTypes = {\n  scrollingDisabled: bool.isRequired,\n  resetPasswordInProgress: bool.isRequired,\n  resetPasswordError: propTypes.error,\n  onSubmitPassword: func.isRequired,\n\n  // from withRouter\n  location: shape({\n    search: string,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { resetPasswordInProgress, resetPasswordError } = state.PasswordResetPage;\n  return {\n    scrollingDisabled: isScrollingDisabled(state),\n    resetPasswordInProgress,\n    resetPasswordError,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmitPassword: (email, token, password) => dispatch(resetPassword(email, token, password)),\n});\n\n// Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\nconst PasswordResetPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(PasswordResetPageComponent);\n\nexport default PasswordResetPage;\n"],"sourceRoot":""}