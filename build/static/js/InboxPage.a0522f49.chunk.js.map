{"version":3,"sources":["containers/InboxPage/InboxPage.module.css","containers/InboxPage/InboxPage.js"],"names":["module","exports","txState","intl","tx","type","isOrder","txIsEnquired","nameClassName","css","nameNotEmphasized","nameEmphasized","bookingClassName","bookingActionNeeded","lastTransitionedAtClassName","lastTransitionedAtEmphasized","stateClassName","stateActionNeeded","state","formatMessage","id","txIsRequested","bookingNoActionNeeded","txIsPaymentPending","lastTransitionedAtNotEmphasized","stateNoActionNeeded","txIsPaymentExpired","txIsDeclined","txIsAccepted","stateSucces","txIsCanceled","txHasBeenDelivered","console","warn","attributes","lastTransition","BookingInfoMaybe","props","unitType","className","classNames","bookingInfoWrapper","dateType","DATE_TYPE_DATE","InboxItem","stateData","customer","provider","otherUser","otherUserDisplayName","user","isOtherUserBanned","banned","rowNotificationDot","notificationDot","lastTransitionedAt","date","short","formatDate","month","day","long","formatTime","linkClasses","itemLink","bannedUserLink","item","itemAvatar","name","params","uuid","itemInfo","itemUsername","itemState","stateName","title","InboxPageComponent","currentUser","fetchInProgress","fetchOrdersOrSalesError","pagination","providerNotificationCount","scrollingDisabled","transactions","tab","ensuredCurrentUser","ensureCurrentUser","isOrders","ordersTitle","salesTitle","error","noResults","length","pagingLinks","totalPages","pageName","pagePathParams","providerNotificationBadge","count","tabs","text","selected","linkProps","nav","rootClassName","tabRootClassName","topbar","mobileRootClassName","mobileTopbar","desktopClassName","desktopTopbar","currentPage","navigation","itemList","listItemsLoading","map","listItem","defaultProps","config","bookingUnitType","currentUserHasOrders","sendVerificationEmailError","InboxPage","compose","connect","transactionRefs","currentUserNotificationCount","isScrollingDisabled","getMarketplaceEntities","injectIntl"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,OAAS,0BAA0B,aAAe,gCAAgC,cAAgB,iCAAiC,WAAa,8BAA8B,MAAQ,yBAAyB,KAAO,wBAAwB,IAAM,uBAAuB,MAAQ,yBAAyB,UAAY,6BAA6B,SAAW,4BAA4B,iBAAmB,oCAAoC,qBAAuB,wCAAwC,SAAW,4BAA4B,KAAO,wBAAwB,SAAW,4BAA4B,aAAe,gCAAgC,WAAa,8BAA8B,mBAAqB,sCAAsC,gBAAkB,mCAAmC,SAAW,4BAA4B,mBAAqB,sCAAsC,UAAY,6BAA6B,UAAY,6BAA6B,mBAAqB,sCAAsC,WAAa,8BAA8B,UAAY,6BAA6B,kBAAoB,qCAAqC,oBAAsB,uCAAuC,YAAc,+BAA+B,eAAiB,kCAAkC,kBAAoB,qCAAqC,oBAAsB,uCAAuC,sBAAwB,yCAAyC,6BAA+B,gDAAgD,gCAAkC,mDAAmD,eAAiB,kCAAkC,YAAc,iC,kUCoDnuDC,EAAU,SAACC,EAAMC,EAAIC,GAChC,IAAMC,EAAmB,UAATD,EAEhB,OAAIE,YAAaH,GACR,CACLI,cAAeF,EAAUG,IAAIC,kBAAoBD,IAAIE,eACrDC,iBAAkBH,IAAII,oBACtBC,4BAA6BL,IAAIM,6BACjCC,eAAgBP,IAAIQ,kBACpBC,MAAOf,EAAKgB,cAAc,CACxBC,GAAI,4BAGCC,YAAcjB,GACLE,EACd,CACEE,cAAeC,IAAIC,kBACnBE,iBAAkBH,IAAIa,sBACtBR,4BAA6BL,IAAIM,6BACjCC,eAAgBP,IAAIQ,kBACpBC,MAAOf,EAAKgB,cAAc,CACxBC,GAAI,8BAGR,CACEZ,cAAeC,IAAIE,eACnBC,iBAAkBH,IAAII,oBACtBC,4BAA6BL,IAAIM,6BACjCC,eAAgBP,IAAIQ,kBACpBC,MAAOf,EAAKgB,cAAc,CACxBC,GAAI,4BAKHG,YAAmBnB,GACrB,CACLI,cAAeF,EAAUG,IAAIC,kBAAoBD,IAAIE,eACrDC,iBAAkBH,IAAIa,sBACtBR,4BAA6BL,IAAIe,gCACjCR,eAAgBV,EAAUG,IAAIQ,kBAAoBR,IAAIgB,oBACtDP,MAAOf,EAAKgB,cAAc,CACxBC,GAAI,mCAGCM,YAAmBtB,GACrB,CACLI,cAAeC,IAAIC,kBACnBE,iBAAkBH,IAAIa,sBACtBR,4BAA6BL,IAAIe,gCACjCR,eAAgBP,IAAIgB,oBACpBP,MAAOf,EAAKgB,cAAc,CACxBC,GAAI,4BAGCO,YAAavB,GACf,CACLI,cAAeC,IAAIC,kBACnBE,iBAAkBH,IAAIa,sBACtBR,4BAA6BL,IAAIe,gCACjCR,eAAgBP,IAAIgB,oBACpBP,MAAOf,EAAKgB,cAAc,CACxBC,GAAI,6BAGCQ,YAAaxB,GACf,CACLI,cAAeC,IAAIC,kBACnBE,iBAAkBH,IAAIa,sBACtBR,4BAA6BL,IAAIe,gCACjCR,eAAgBP,IAAIoB,YACpBX,MAAOf,EAAKgB,cAAc,CACxBC,GAAI,6BAGCU,YAAa1B,GACf,CACLI,cAAeC,IAAIC,kBACnBE,iBAAkBH,IAAIa,sBACtBR,4BAA6BL,IAAIe,gCACjCR,eAAgBP,IAAIgB,oBACpBP,MAAOf,EAAKgB,cAAc,CACxBC,GAAI,6BAGCW,YAAmB3B,GACrB,CACLI,cAAeC,IAAIC,kBACnBE,iBAAkBH,IAAIa,sBACtBR,4BAA6BL,IAAIe,gCACjCR,eAAgBP,IAAIgB,oBACpBP,MAAOf,EAAKgB,cAAc,CACxBC,GAAI,+BAIRY,QAAQC,KAAK,8BAA+B7B,EAAG8B,WAAWC,gBACnD,OAKLC,EAAmB,SAAAC,GACvB,IAAQzB,EAAkDyB,EAAlDzB,iBAAkBN,EAAgC+B,EAAhC/B,QAASH,EAAuBkC,EAAvBlC,KAAMC,EAAiBiC,EAAjBjC,GAAIkC,EAAaD,EAAbC,SAG7C,OAFkB/B,YAAaH,GAGtB,KAcP,qBAAKmC,UAAWC,IAAW/B,IAAIgC,mBAAoB7B,GAAnD,SACE,cAAC,IAAD,CACEA,iBAAkBA,EAClBN,QAASA,EACTH,KAAMA,EACNC,GAAIA,EACJkC,SAAUA,EACVI,SAAUC,SAaLC,EAAY,SAAAP,GACvB,IAAQC,EAAwCD,EAAxCC,SAAUjC,EAA8BgC,EAA9BhC,KAAMD,EAAwBiC,EAAxBjC,GAAID,EAAoBkC,EAApBlC,KAAM0C,EAAcR,EAAdQ,UAC1BC,EAAuB1C,EAAvB0C,SAAUC,EAAa3C,EAAb2C,SACZzC,EAAmB,UAATD,EAEV2C,EAAY1C,EAAUyC,EAAWD,EACjCG,EAAuB,cAAC,KAAD,CAAiBC,KAAMF,EAAW7C,KAAMA,IAC/DgD,EAAoBH,EAAUd,WAAWkB,OAGzCC,GADsB/C,GAAWe,YAAcjB,GACL,qBAAKmC,UAAW9B,IAAI6C,kBAAsB,KACpFC,EAnKW,SAACpD,EAAMqD,GACxB,MAAO,CACLC,MAAOtD,EAAKuD,WAAWF,EAAM,CAC3BG,MAAO,QACPC,IAAK,YAEPC,KAAK,GAAD,OAAK1D,EAAKuD,WAAWF,GAArB,YAA8BrD,EAAK2D,WAAWN,KA6JzBE,CAAWvD,EAAMC,EAAG8B,WAAWqB,oBAEpDQ,EAAcvB,IAAW/B,IAAIuD,SAAL,eAC3BvD,IAAIwD,eAAiBd,IAGxB,OACE,sBAAKZ,UAAW9B,IAAIyD,KAApB,UACE,qBAAK3B,UAAW9B,IAAI0D,WAApB,SACE,cAAC,IAAD,CAAQjB,KAAMF,MAEhB,eAAC,KAAD,CACET,UAAWwB,EACXK,KAAM9D,EAAU,mBAAqB,kBACrC+D,OAAQ,CAAEjD,GAAIhB,EAAGgB,GAAGkD,MAHtB,UAKE,qBAAK/B,UAAW9B,IAAI4C,mBAApB,SAAyCA,IACzC,sBAAKd,UAAW9B,IAAI8D,SAApB,UACE,qBAAKhC,UAAWC,IAAW/B,IAAI+D,aAAc3B,EAAUrC,eAAvD,SACGyC,IAEH,cAACb,EAAD,CACExB,iBAAkBiC,EAAUjC,iBAC5BT,KAAMA,EACNG,QAASA,EACTF,GAAIA,EACJkC,SAAUA,OAGd,sBAAKC,UAAW9B,IAAIgE,UAApB,UACE,qBAAKlC,UAAWC,IAAW/B,IAAIiE,UAAW7B,EAAU7B,gBAApD,SACG6B,EAAU3B,QAEb,qBACEqB,UAAWC,IAAW/B,IAAI8C,mBAAoBV,EAAU/B,6BACxD6D,MAAOpB,EAAmBM,KAF5B,SAIGN,EAAmBE,kBAenBmB,EAAqB,SAAAvC,GAChC,IACEC,EAUED,EAVFC,SACAuC,EASExC,EATFwC,YACAC,EAQEzC,EARFyC,gBACAC,EAOE1C,EAPF0C,wBACA5E,EAMEkC,EANFlC,KACA6E,EAKE3C,EALF2C,WACAX,EAIEhC,EAJFgC,OACAY,EAGE5C,EAHF4C,0BACAC,EAEE7C,EAFF6C,kBACAC,EACE9C,EADF8C,aAEMC,EAAQf,EAARe,IACFC,EAAqBC,YAAkBT,GAG7C,KADyB,WAARO,GAA4B,UAARA,GAEnC,OAAO,cAAC,IAAD,IAGT,IA+BoChF,EAAiB8C,EA/B/CqC,EAAmB,WAARH,EAEXI,EAAcrF,EAAKgB,cAAc,CAAEC,GAAI,0BACvCqE,EAAatF,EAAKgB,cAAc,CAAEC,GAAI,yBACtCuD,EAAQY,EAAWC,EAAcC,EAcjCC,EAAQX,EACZ,mBAAGxC,UAAW9B,IAAIiF,MAAlB,SACE,cAAC,IAAD,CAAkBtE,GAAG,4BAErB,KAEEuE,EACHb,GAA2C,IAAxBK,EAAaS,QAAiBb,EAI9C,KAHF,oBAAoBxC,UAAW9B,IAAIkF,UAAnC,SACE,cAAC,IAAD,CAAkBvE,GAAImE,EAAW,0BAA4B,4BADvD,aAYNM,GADHf,IANiC1E,EAMa+E,EANIjC,EAMoBmC,EAAVE,EAJzDrC,EAAK9B,IAAMhB,GAAMA,EAAGwF,OAAS,GAAKxF,EAAG,GAAG0C,SAAS1B,GAAGkD,OAASpB,EAAK9B,GAAGkD,KACrEpB,EAAK9B,IAAMhB,GAAMA,EAAGwF,OAAS,GAAKxF,EAAG,GAAG2C,SAAS3B,GAAGkD,OAASpB,EAAK9B,GAAGkD,OAKtDU,GAAcA,EAAWc,WAAa,EACvD,cAAC,KAAD,CACEvD,UAAW9B,IAAIuE,WACfe,SAAS,YACTC,eAAgB3B,EAChBW,WAAYA,IAEZ,KAEAiB,EACJhB,EAA4B,EAAI,cAAC,KAAD,CAAmBiB,MAAOjB,IAAgC,KACtFkB,EAAO,CACX,CACEC,KACE,+BACE,cAAC,IAAD,CAAkBhF,GAAG,+BAGzBiF,SAAUd,EACVe,UAAW,CACTlC,KAAM,YACNC,OAAQ,CAAEe,IAAK,YAGnB,CACEgB,KACE,iCACE,cAAC,IAAD,CAAkBhF,GAAG,4BACpB6E,KAGLI,UAAWd,EACXe,UAAW,CACTlC,KAAM,YACNC,OAAQ,CAAEe,IAAK,YAIfmB,EAAM,cAAC,KAAD,CAAQC,cAAe/F,IAAI0F,KAAMM,iBAAkBhG,IAAI2E,IAAKe,KAAMA,IAE9E,OACE,cAAC,KAAD,CAAMxB,MAAOA,EAAOO,kBAAmBA,EAAvC,SACE,eAAC,KAAD,WACE,cAAC,KAAD,UACE,cAAC,IAAD,CACE3C,UAAW9B,IAAIiG,OACfC,oBAAqBlG,IAAImG,aACzBC,iBAAkBpG,IAAIqG,cACtBC,YAAY,gBAGhB,eAAC,KAAD,CAAsBxE,UAAW9B,IAAIuG,WAArC,UACE,oBAAIzE,UAAW9B,IAAIkE,MAAnB,SACE,cAAC,IAAD,CAAkBvD,GAAG,sBAEtBmF,KAEH,eAAC,KAAD,WACGb,EACD,qBAAInD,UAAW9B,IAAIwG,SAAnB,UACInC,EAGA,oBAAIvC,UAAW9B,IAAIyG,iBAAnB,SACE,cAAC,KAAD,MAHF/B,EAAagC,KA9FR,SAAA/G,GACf,IAAMC,EAAOkF,EAAW,QAAU,OAC5B1C,EAAY3C,EAAQC,EAAMC,EAAIC,GAGpC,OAAOwC,EACL,oBAAqBN,UAAW9B,IAAI2G,SAApC,SACE,cAACxE,EAAD,CAAWN,SAAUA,EAAUjC,KAAMA,EAAMD,GAAIA,EAAID,KAAMA,EAAM0C,UAAWA,KADnEzC,EAAGgB,GAAGkD,MAGb,QA2FKqB,KAEFE,KAEH,cAAC,KAAD,UACE,cAAC,IAAD,YAOVjB,EAAmByC,aAAe,CAChC/E,SAAUgF,IAAOC,gBACjB1C,YAAa,KACb2C,qBAAsB,KACtBzC,wBAAyB,KACzBC,WAAY,KACZC,0BAA2B,EAC3BwC,2BAA4B,MAqB9B,IAcMC,EAAYC,YAChBC,aAfsB,SAAA1G,GACtB,MAAkFA,EAAMwG,UAAhF5C,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,wBAAyBC,EAAlD,EAAkDA,WAAY6C,EAA9D,EAA8DA,gBAC9D,EAAiF3G,EAAMgC,KACvF,MAAO,CACL2B,YAFF,EAAQA,YAGNC,kBACAC,0BACAC,aACAC,0BANF,EAAqB6C,6BAOnB5C,kBAAmB6C,YAAoB7G,GACvCiE,aAAc6C,YAAuB9G,EAAO2G,OAM9CI,IAFgBN,CAGhB/C,GAEa8C","file":"static/js/InboxPage.a0522f49.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"topbar\":\"InboxPage_topbar__wEh0i\",\"mobileTopbar\":\"InboxPage_mobileTopbar__26tMQ\",\"desktopTopbar\":\"InboxPage_desktopTopbar__1A7zT\",\"navigation\":\"InboxPage_navigation__2yOZ9\",\"title\":\"InboxPage_title__3LTZk\",\"tabs\":\"InboxPage_tabs__1rat0\",\"tab\":\"InboxPage_tab__2FGmn\",\"error\":\"InboxPage_error__1M_NF\",\"noResults\":\"InboxPage_noResults__ahF7O\",\"itemList\":\"InboxPage_itemList__15QgA\",\"listItemsLoading\":\"InboxPage_listItemsLoading__3ILPA\",\"loadingSpinnerFadeIn\":\"InboxPage_loadingSpinnerFadeIn__htIGC\",\"listItem\":\"InboxPage_listItem__3PCNN\",\"item\":\"InboxPage_item__2u8U_\",\"itemLink\":\"InboxPage_itemLink__2TCPh\",\"itemUsername\":\"InboxPage_itemUsername__2sIr2\",\"itemAvatar\":\"InboxPage_itemAvatar__OPvOx\",\"rowNotificationDot\":\"InboxPage_rowNotificationDot__2udfp\",\"notificationDot\":\"InboxPage_notificationDot__VtWTf\",\"itemInfo\":\"InboxPage_itemInfo___0uo3\",\"bookingInfoWrapper\":\"InboxPage_bookingInfoWrapper__1NL_s\",\"itemPrice\":\"InboxPage_itemPrice__1_jFZ\",\"itemState\":\"InboxPage_itemState__3LFZn\",\"lastTransitionedAt\":\"InboxPage_lastTransitionedAt__3xmi1\",\"pagination\":\"InboxPage_pagination__2xxS4\",\"stateName\":\"InboxPage_stateName__1OQxd\",\"stateActionNeeded\":\"InboxPage_stateActionNeeded__2nHkj\",\"stateNoActionNeeded\":\"InboxPage_stateNoActionNeeded__3xfhv\",\"stateSucces\":\"InboxPage_stateSucces__1VoMu\",\"nameEmphasized\":\"InboxPage_nameEmphasized__2PSha\",\"nameNotEmphasized\":\"InboxPage_nameNotEmphasized__2X8LP\",\"bookingActionNeeded\":\"InboxPage_bookingActionNeeded__39H33\",\"bookingNoActionNeeded\":\"InboxPage_bookingNoActionNeeded__20kd3\",\"lastTransitionedAtEmphasized\":\"InboxPage_lastTransitionedAtEmphasized__3FRO6\",\"lastTransitionedAtNotEmphasized\":\"InboxPage_lastTransitionedAtNotEmphasized__haQS6\",\"bannedUserLink\":\"InboxPage_bannedUserLink__opYxK\",\"bookingInfo\":\"InboxPage_bookingInfo__J6tXh\"};","import React from 'react';\nimport { arrayOf, bool, number, oneOf, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport classNames from 'classnames';\nimport {\n  txIsAccepted,\n  txIsCanceled,\n  txIsDeclined,\n  txIsEnquired,\n  txIsRequested,\n  txHasBeenDelivered,\n  txIsPaymentExpired,\n  txIsPaymentPending,\n} from '../../util/transaction';\nimport { propTypes, DATE_TYPE_DATE } from '../../util/types';\nimport { ensureCurrentUser } from '../../util/data';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  Avatar,\n  BookingTimeInfo,\n  NamedLink,\n  NotificationBadge,\n  Page,\n  PaginationLinks,\n  TabNav,\n  LayoutSideNavigation,\n  LayoutWrapperMain,\n  LayoutWrapperSideNav,\n  LayoutWrapperTopbar,\n  LayoutWrapperFooter,\n  Footer,\n  IconSpinner,\n  UserDisplayName,\n} from '../../components';\nimport { TopbarContainer, NotFoundPage } from '../../containers';\nimport config from '../../config';\n\nimport css from './InboxPage.module.css';\n\nconst formatDate = (intl, date) => {\n  return {\n    short: intl.formatDate(date, {\n      month: 'short',\n      day: 'numeric',\n    }),\n    long: `${intl.formatDate(date)} ${intl.formatTime(date)}`,\n  };\n};\n\n// Translated name of the state of the given transaction\nexport const txState = (intl, tx, type) => {\n  const isOrder = type === 'order';\n\n  if (txIsEnquired(tx)) {\n    return {\n      nameClassName: isOrder ? css.nameNotEmphasized : css.nameEmphasized,\n      bookingClassName: css.bookingActionNeeded,\n      lastTransitionedAtClassName: css.lastTransitionedAtEmphasized,\n      stateClassName: css.stateActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateEnquiry',\n      }),\n    };\n  } else if (txIsRequested(tx)) {\n    const requested = isOrder\n      ? {\n          nameClassName: css.nameNotEmphasized,\n          bookingClassName: css.bookingNoActionNeeded,\n          lastTransitionedAtClassName: css.lastTransitionedAtEmphasized,\n          stateClassName: css.stateActionNeeded,\n          state: intl.formatMessage({\n            id: 'InboxPage.stateRequested',\n          }),\n        }\n      : {\n          nameClassName: css.nameEmphasized,\n          bookingClassName: css.bookingActionNeeded,\n          lastTransitionedAtClassName: css.lastTransitionedAtEmphasized,\n          stateClassName: css.stateActionNeeded,\n          state: intl.formatMessage({\n            id: 'InboxPage.statePending',\n          }),\n        };\n\n    return requested;\n  } else if (txIsPaymentPending(tx)) {\n    return {\n      nameClassName: isOrder ? css.nameNotEmphasized : css.nameEmphasized,\n      bookingClassName: css.bookingNoActionNeeded,\n      lastTransitionedAtClassName: css.lastTransitionedAtNotEmphasized,\n      stateClassName: isOrder ? css.stateActionNeeded : css.stateNoActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.statePendingPayment',\n      }),\n    };\n  } else if (txIsPaymentExpired(tx)) {\n    return {\n      nameClassName: css.nameNotEmphasized,\n      bookingClassName: css.bookingNoActionNeeded,\n      lastTransitionedAtClassName: css.lastTransitionedAtNotEmphasized,\n      stateClassName: css.stateNoActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateExpired',\n      }),\n    };\n  } else if (txIsDeclined(tx)) {\n    return {\n      nameClassName: css.nameNotEmphasized,\n      bookingClassName: css.bookingNoActionNeeded,\n      lastTransitionedAtClassName: css.lastTransitionedAtNotEmphasized,\n      stateClassName: css.stateNoActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateDeclined',\n      }),\n    };\n  } else if (txIsAccepted(tx)) {\n    return {\n      nameClassName: css.nameNotEmphasized,\n      bookingClassName: css.bookingNoActionNeeded,\n      lastTransitionedAtClassName: css.lastTransitionedAtNotEmphasized,\n      stateClassName: css.stateSucces,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateAccepted',\n      }),\n    };\n  } else if (txIsCanceled(tx)) {\n    return {\n      nameClassName: css.nameNotEmphasized,\n      bookingClassName: css.bookingNoActionNeeded,\n      lastTransitionedAtClassName: css.lastTransitionedAtNotEmphasized,\n      stateClassName: css.stateNoActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateCanceled',\n      }),\n    };\n  } else if (txHasBeenDelivered(tx)) {\n    return {\n      nameClassName: css.nameNotEmphasized,\n      bookingClassName: css.bookingNoActionNeeded,\n      lastTransitionedAtClassName: css.lastTransitionedAtNotEmphasized,\n      stateClassName: css.stateNoActionNeeded,\n      state: intl.formatMessage({\n        id: 'InboxPage.stateDelivered',\n      }),\n    };\n  } else {\n    console.warn('This transition is unknown:', tx.attributes.lastTransition);\n    return null;\n  }\n};\n\n// Functional component as internal helper to print BookingTimeInfo if that is needed\nconst BookingInfoMaybe = props => {\n  const { bookingClassName, isOrder, intl, tx, unitType } = props;\n  const isEnquiry = txIsEnquired(tx);\n\n  if (isEnquiry) {\n    return null;\n  }\n\n  // If you want to show the booking price after the booking time on InboxPage you can\n  // add the price after the BookingTimeInfo component. You can get the price by uncommenting\n  // sthe following lines:\n\n  // const bookingPrice = isOrder ? tx.attributes.payinTotal : tx.attributes.payoutTotal;\n  // const price = bookingPrice ? formatMoney(intl, bookingPrice) : null;\n\n  // Remember to also add formatMoney function from 'util/currency.js' and add this after BookingTimeInfo:\n  // <div className={css.itemPrice}>{price}</div>\n\n  return (\n    <div className={classNames(css.bookingInfoWrapper, bookingClassName)}>\n      <BookingTimeInfo\n        bookingClassName={bookingClassName}\n        isOrder={isOrder}\n        intl={intl}\n        tx={tx}\n        unitType={unitType}\n        dateType={DATE_TYPE_DATE}\n      />\n    </div>\n  );\n};\n\nBookingInfoMaybe.propTypes = {\n  intl: intlShape.isRequired,\n  isOrder: bool.isRequired,\n  tx: propTypes.transaction.isRequired,\n  unitType: propTypes.bookingUnitType.isRequired,\n};\n\nexport const InboxItem = props => {\n  const { unitType, type, tx, intl, stateData } = props;\n  const { customer, provider } = tx;\n  const isOrder = type === 'order';\n\n  const otherUser = isOrder ? provider : customer;\n  const otherUserDisplayName = <UserDisplayName user={otherUser} intl={intl} />;\n  const isOtherUserBanned = otherUser.attributes.banned;\n\n  const isSaleNotification = !isOrder && txIsRequested(tx);\n  const rowNotificationDot = isSaleNotification ? <div className={css.notificationDot} /> : null;\n  const lastTransitionedAt = formatDate(intl, tx.attributes.lastTransitionedAt);\n\n  const linkClasses = classNames(css.itemLink, {\n    [css.bannedUserLink]: isOtherUserBanned,\n  });\n\n  return (\n    <div className={css.item}>\n      <div className={css.itemAvatar}>\n        <Avatar user={otherUser} />\n      </div>\n      <NamedLink\n        className={linkClasses}\n        name={isOrder ? 'OrderDetailsPage' : 'SaleDetailsPage'}\n        params={{ id: tx.id.uuid }}\n      >\n        <div className={css.rowNotificationDot}>{rowNotificationDot}</div>\n        <div className={css.itemInfo}>\n          <div className={classNames(css.itemUsername, stateData.nameClassName)}>\n            {otherUserDisplayName}\n          </div>\n          <BookingInfoMaybe\n            bookingClassName={stateData.bookingClassName}\n            intl={intl}\n            isOrder={isOrder}\n            tx={tx}\n            unitType={unitType}\n          />\n        </div>\n        <div className={css.itemState}>\n          <div className={classNames(css.stateName, stateData.stateClassName)}>\n            {stateData.state}\n          </div>\n          <div\n            className={classNames(css.lastTransitionedAt, stateData.lastTransitionedAtClassName)}\n            title={lastTransitionedAt.long}\n          >\n            {lastTransitionedAt.short}\n          </div>\n        </div>\n      </NamedLink>\n    </div>\n  );\n};\n\nInboxItem.propTypes = {\n  unitType: propTypes.bookingUnitType.isRequired,\n  type: oneOf(['order', 'sale']).isRequired,\n  tx: propTypes.transaction.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport const InboxPageComponent = props => {\n  const {\n    unitType,\n    currentUser,\n    fetchInProgress,\n    fetchOrdersOrSalesError,\n    intl,\n    pagination,\n    params,\n    providerNotificationCount,\n    scrollingDisabled,\n    transactions,\n  } = props;\n  const { tab } = params;\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\n\n  const validTab = tab === 'orders' || tab === 'sales';\n  if (!validTab) {\n    return <NotFoundPage />;\n  }\n\n  const isOrders = tab === 'orders';\n\n  const ordersTitle = intl.formatMessage({ id: 'InboxPage.ordersTitle' });\n  const salesTitle = intl.formatMessage({ id: 'InboxPage.salesTitle' });\n  const title = isOrders ? ordersTitle : salesTitle;\n\n  const toTxItem = tx => {\n    const type = isOrders ? 'order' : 'sale';\n    const stateData = txState(intl, tx, type);\n\n    // Render InboxItem only if the latest transition of the transaction is handled in the `txState` function.\n    return stateData ? (\n      <li key={tx.id.uuid} className={css.listItem}>\n        <InboxItem unitType={unitType} type={type} tx={tx} intl={intl} stateData={stateData} />\n      </li>\n    ) : null;\n  };\n\n  const error = fetchOrdersOrSalesError ? (\n    <p className={css.error}>\n      <FormattedMessage id=\"InboxPage.fetchFailed\" />\n    </p>\n  ) : null;\n\n  const noResults =\n    !fetchInProgress && transactions.length === 0 && !fetchOrdersOrSalesError ? (\n      <li key=\"noResults\" className={css.noResults}>\n        <FormattedMessage id={isOrders ? 'InboxPage.noOrdersFound' : 'InboxPage.noSalesFound'} />\n      </li>\n    ) : null;\n\n  const hasOrderOrSaleTransactions = (tx, isOrdersTab, user) => {\n    return isOrdersTab\n      ? user.id && tx && tx.length > 0 && tx[0].customer.id.uuid === user.id.uuid\n      : user.id && tx && tx.length > 0 && tx[0].provider.id.uuid === user.id.uuid;\n  };\n  const hasTransactions =\n    !fetchInProgress && hasOrderOrSaleTransactions(transactions, isOrders, ensuredCurrentUser);\n  const pagingLinks =\n    hasTransactions && pagination && pagination.totalPages > 1 ? (\n      <PaginationLinks\n        className={css.pagination}\n        pageName=\"InboxPage\"\n        pagePathParams={params}\n        pagination={pagination}\n      />\n    ) : null;\n\n  const providerNotificationBadge =\n    providerNotificationCount > 0 ? <NotificationBadge count={providerNotificationCount} /> : null;\n  const tabs = [\n    {\n      text: (\n        <span>\n          <FormattedMessage id=\"InboxPage.ordersTabTitle\" />\n        </span>\n      ),\n      selected: isOrders,\n      linkProps: {\n        name: 'InboxPage',\n        params: { tab: 'orders' },\n      },\n    },\n    {\n      text: (\n        <span>\n          <FormattedMessage id=\"InboxPage.salesTabTitle\" />\n          {providerNotificationBadge}\n        </span>\n      ),\n      selected: !isOrders,\n      linkProps: {\n        name: 'InboxPage',\n        params: { tab: 'sales' },\n      },\n    },\n  ];\n  const nav = <TabNav rootClassName={css.tabs} tabRootClassName={css.tab} tabs={tabs} />;\n\n  return (\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\n      <LayoutSideNavigation>\n        <LayoutWrapperTopbar>\n          <TopbarContainer\n            className={css.topbar}\n            mobileRootClassName={css.mobileTopbar}\n            desktopClassName={css.desktopTopbar}\n            currentPage=\"InboxPage\"\n          />\n        </LayoutWrapperTopbar>\n        <LayoutWrapperSideNav className={css.navigation}>\n          <h1 className={css.title}>\n            <FormattedMessage id=\"InboxPage.title\" />\n          </h1>\n          {nav}\n        </LayoutWrapperSideNav>\n        <LayoutWrapperMain>\n          {error}\n          <ul className={css.itemList}>\n            {!fetchInProgress ? (\n              transactions.map(toTxItem)\n            ) : (\n              <li className={css.listItemsLoading}>\n                <IconSpinner />\n              </li>\n            )}\n            {noResults}\n          </ul>\n          {pagingLinks}\n        </LayoutWrapperMain>\n        <LayoutWrapperFooter>\n          <Footer />\n        </LayoutWrapperFooter>\n      </LayoutSideNavigation>\n    </Page>\n  );\n};\n\nInboxPageComponent.defaultProps = {\n  unitType: config.bookingUnitType,\n  currentUser: null,\n  currentUserHasOrders: null,\n  fetchOrdersOrSalesError: null,\n  pagination: null,\n  providerNotificationCount: 0,\n  sendVerificationEmailError: null,\n};\n\nInboxPageComponent.propTypes = {\n  params: shape({\n    tab: string.isRequired,\n  }).isRequired,\n\n  unitType: propTypes.bookingUnitType,\n  currentUser: propTypes.currentUser,\n  fetchInProgress: bool.isRequired,\n  fetchOrdersOrSalesError: propTypes.error,\n  pagination: propTypes.pagination,\n  providerNotificationCount: number,\n  scrollingDisabled: bool.isRequired,\n  transactions: arrayOf(propTypes.transaction).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { fetchInProgress, fetchOrdersOrSalesError, pagination, transactionRefs } = state.InboxPage;\n  const { currentUser, currentUserNotificationCount: providerNotificationCount } = state.user;\n  return {\n    currentUser,\n    fetchInProgress,\n    fetchOrdersOrSalesError,\n    pagination,\n    providerNotificationCount,\n    scrollingDisabled: isScrollingDisabled(state),\n    transactions: getMarketplaceEntities(state, transactionRefs),\n  };\n};\n\nconst InboxPage = compose(\n  connect(mapStateToProps),\n  injectIntl\n)(InboxPageComponent);\n\nexport default InboxPage;\n"],"sourceRoot":""}