{"version":3,"sources":["containers/AuthenticationPage/AuthenticationPage.js","containers/AuthenticationPage/AuthenticationPage.module.css"],"names":["AuthenticationPageComponent","props","state","tosModalOpen","authError","Cookies","get","JSON","parse","replace","authInfo","remove","this","authInProgress","currentUser","intl","isAuthenticated","location","loginError","scrollingDisabled","signupError","submitLogin","submitSignup","confirmError","submitSingupWithIdp","tab","sendVerificationEmailInProgress","sendVerificationEmailError","onResendVerificationEmail","onManageDisableScrolling","isConfirm","isLogin","locationFrom","from","authinfoFrom","user","ensureCurrentUser","currentUserLoaded","id","showEmailVerification","attributes","emailVerified","to","name","loginErrorMessage","className","css","error","signupErrorMessage","isSignupEmailTakenError","confirmErrorMessage","errorMessage","message","loginOrSignupError","fromState","tabs","text","selected","linkProps","idp","idpId","str","toUpperCase","confirmForm","content","signupWithIdpTitle","values","confirmInfoText","form","onSubmit","idpToken","email","firstName","lastName","newEmail","newFirstName","newLastName","rest","authParams","protectedData","isEmpty","inProgress","onOpenTermsOfService","setState","authenticationForms","loginForm","signupForm","fname","lname","params","trim","formContent","profile","resendEmailLink","rootClassName","modalHelperLink","onClick","fixEmailLink","resendErrorTranslationId","isTooManyEmailVerificationRequestsError","resendErrorMessage","emailVerificationContent","verifyClose","closeText","closeIcon","modalIcon","modalTitle","modalMessage","bottomWrapper","modalHelperText","siteTitle","config","schemaTitle","formatMessage","topbarClasses","classNames","hideOnMobile","title","schema","layoutWrapperMain","root","isOpen","onClose","usePortal","termsWrapper","termsHeading","Component","defaultProps","showSocialLoginsForTests","PropTypes","bool","func","object","oneOf","shape","AuthenticationPage","compose","withRouter","connect","Auth","authenticationInProgress","isScrollingDisabled","dispatch","password","login","signup","signupWithIdp","sendVerificationEmail","componentId","disableScrolling","manageDisableScrolling","injectIntl","module","exports"],"mappings":"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","file":"AuthenticationPage.920779fe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport classNames from 'classnames';\nimport { isEmpty } from 'lodash';\n\nimport routeConfiguration from '../../routeConfiguration';\nimport { pathByRouteName } from '../../util/routes';\nimport { apiBaseUrl } from '../../util/api';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport config from '../../config';\nimport { propTypes } from '../../util/types';\nimport { ensureCurrentUser } from '../../util/data';\nimport {\n  isSignupEmailTakenError,\n  isTooManyEmailVerificationRequestsError,\n} from '../../util/errors';\nimport {\n  Page,\n  NamedLink,\n  NamedRedirect,\n  LinkTabNavHorizontal,\n  IconEmailSent,\n  InlineTextButton,\n  SocialLoginButton,\n  IconClose,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n  Modal,\n  TermsOfService,\n} from '../../components';\nimport { ConfirmSignupForm, LoginForm, SignupForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\nimport { login, authenticationInProgress, signup, signupWithIdp } from '../../ducks/Auth.duck';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { sendVerificationEmail } from '../../ducks/user.duck';\nimport { manageDisableScrolling } from '../../ducks/UI.duck';\n\nimport css from './AuthenticationPage.module.css';\nimport { FacebookLogo, GoogleLogo } from './socialLoginLogos';\n\nexport class AuthenticationPageComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tosModalOpen: false,\n      authError: Cookies.get('st-autherror')\n        ? JSON.parse(Cookies.get('st-autherror').replace('j:', ''))\n        : null,\n      authInfo: Cookies.get('st-authinfo')\n        ? JSON.parse(Cookies.get('st-authinfo').replace('j:', ''))\n        : null,\n    };\n  }\n\n  componentDidMount() {\n    // Remove the autherror cookie once the content is saved to state\n    // because we don't want to show the error message e.g. after page refresh\n    Cookies.remove('st-autherror');\n  }\n\n  render() {\n    const {\n      authInProgress,\n      currentUser,\n      intl,\n      isAuthenticated,\n      location,\n      loginError,\n      scrollingDisabled,\n      signupError,\n      submitLogin,\n      submitSignup,\n      confirmError,\n      submitSingupWithIdp,\n      tab,\n      sendVerificationEmailInProgress,\n      sendVerificationEmailError,\n      onResendVerificationEmail,\n      onManageDisableScrolling,\n    } = this.props;\n\n    const isConfirm = tab === 'confirm';\n    const isLogin = tab === 'login';\n    const locationFrom = location.state && location.state.from ? location.state.from : null;\n    const authinfoFrom =\n      this.state.authInfo && this.state.authInfo.from ? this.state.authInfo.from : null;\n    const from = locationFrom ? locationFrom : authinfoFrom ? authinfoFrom : null;\n\n    const user = ensureCurrentUser(currentUser);\n    const currentUserLoaded = !!user.id;\n\n    // We only want to show the email verification dialog in the signup\n    // tab if the user isn't being redirected somewhere else\n    // (i.e. `from` is present). We must also check the `emailVerified`\n    // flag only when the current user is fully loaded.\n    const showEmailVerification = !isLogin && currentUserLoaded && !user.attributes.emailVerified;\n\n    // Already authenticated, redirect away from auth page\n    if (isAuthenticated && from) {\n      return <Redirect to={from} />;\n    } else if (isAuthenticated && currentUserLoaded && !showEmailVerification) {\n      return <NamedRedirect name=\"LandingPage\" />;\n    }\n\n    const loginErrorMessage = (\n      <div className={css.error}>\n        <FormattedMessage id=\"AuthenticationPage.loginFailed\" />\n      </div>\n    );\n\n    const signupErrorMessage = (\n      <div className={css.error}>\n        {isSignupEmailTakenError(signupError) ? (\n          <FormattedMessage id=\"AuthenticationPage.signupFailedEmailAlreadyTaken\" />\n        ) : (\n          <FormattedMessage id=\"AuthenticationPage.signupFailed\" />\n        )}\n      </div>\n    );\n\n    const confirmErrorMessage = confirmError ? (\n      <div className={css.error}>\n        {isSignupEmailTakenError(confirmError) ? (\n          <FormattedMessage id=\"AuthenticationPage.signupFailedEmailAlreadyTaken\" />\n        ) : (\n          <FormattedMessage id=\"AuthenticationPage.signupFailed\" />\n        )}\n      </div>\n    ) : null;\n\n    // eslint-disable-next-line no-confusing-arrow\n    const errorMessage = (error, message) => (error ? message : null);\n    const loginOrSignupError = isLogin\n      ? errorMessage(loginError, loginErrorMessage)\n      : errorMessage(signupError, signupErrorMessage);\n\n    const fromState = { state: from ? { from } : null };\n\n    const tabs = [\n      {\n        text: (\n          <h1 className={css.tab}>\n            <FormattedMessage id=\"AuthenticationPage.signupLinkText\" />\n          </h1>\n        ),\n        selected: !isLogin,\n        linkProps: {\n          name: 'SignupPage',\n          to: fromState,\n        },\n      },\n      {\n        text: (\n          <h1 className={css.tab}>\n            <FormattedMessage id=\"AuthenticationPage.loginLinkText\" />\n          </h1>\n        ),\n        selected: isLogin,\n        linkProps: {\n          name: 'LoginPage',\n          to: fromState,\n        },\n      },\n    ];\n\n    const handleSubmitSignup = values => {\n      const { fname, lname, ...rest } = values;\n      const params = { firstName: fname.trim(), lastName: lname.trim(), ...rest };\n      submitSignup(params);\n    };\n\n    const handleSubmitConfirm = values => {\n      const { idpToken, email, firstName, lastName, idpId } = this.state.authInfo;\n      const { email: newEmail, firstName: newFirstName, lastName: newLastName, ...rest } = values;\n\n      // Pass email, fistName or lastName to Flex API only if user has edited them\n      // sand they can't be fetched directly from idp provider (e.g. Facebook)\n\n      const authParams = {\n        ...(newEmail !== email && { email: newEmail }),\n        ...(newFirstName !== firstName && { firstName: newFirstName }),\n        ...(newLastName !== lastName && { lastName: newLastName }),\n      };\n\n      // If the confirm form has any additional values, pass them forward as user's protected data\n      const protectedData = !isEmpty(rest) ? { ...rest } : null;\n\n      submitSingupWithIdp({\n        idpToken,\n        idpId,\n        ...authParams,\n        ...(!!protectedData && { protectedData }),\n      });\n    };\n\n    const getDefaultRoutes = () => {\n      const routes = routeConfiguration();\n      const baseUrl = apiBaseUrl();\n\n      // Route where the user should be returned after authentication\n      // This is used e.g. with EditListingPage and ListingPage\n      const fromParam = from ? `from=${from}` : '';\n\n      // Default route where user is returned after successfull authentication\n      const defaultReturn = pathByRouteName('LandingPage', routes);\n      const defaultReturnParam = defaultReturn ? `&defaultReturn=${defaultReturn}` : '';\n\n      // Route for confirming user data before creating a new user\n      const defaultConfirm = pathByRouteName('ConfirmPage', routes);\n      const defaultConfirmParam = defaultConfirm ? `&defaultConfirm=${defaultConfirm}` : '';\n\n      return { baseUrl, fromParam, defaultReturnParam, defaultConfirmParam };\n    };\n    const authWithFacebook = () => {\n      const defaultRoutes = getDefaultRoutes();\n      const { baseUrl, fromParam, defaultReturnParam, defaultConfirmParam } = defaultRoutes;\n      window.location.href = `${baseUrl}/api/auth/facebook?${fromParam}${defaultReturnParam}${defaultConfirmParam}`;\n    };\n\n    const authWithGoogle = () => {\n      const defaultRoutes = getDefaultRoutes();\n      const { baseUrl, fromParam, defaultReturnParam, defaultConfirmParam } = defaultRoutes;\n      window.location.href = `${baseUrl}/api/auth/google?${fromParam}${defaultReturnParam}${defaultConfirmParam}`;\n    };\n\n    const idp = this.state.authInfo\n      ? this.state.authInfo.idpId.replace(/^./, str => str.toUpperCase())\n      : null;\n\n    // Form for confirming information frm IdP (e.g. Facebook)\n    // before new user is created to Flex\n    const confirmForm = (\n      <div className={css.content}>\n        <h1 className={css.signupWithIdpTitle}>\n          <FormattedMessage id=\"AuthenticationPage.confirmSignupWithIdpTitle\" values={{ idp }} />\n        </h1>\n\n        <p className={css.confirmInfoText}>\n          <FormattedMessage id=\"AuthenticationPage.confirmSignupInfoText\" />\n        </p>\n        {confirmErrorMessage}\n        <ConfirmSignupForm\n          className={css.form}\n          onSubmit={handleSubmitConfirm}\n          inProgress={authInProgress}\n          onOpenTermsOfService={() => this.setState({ tosModalOpen: true })}\n          authInfo={this.state.authInfo}\n          idp={idp}\n        />\n      </div>\n    );\n\n    // Social login buttons\n    const showFacebookLogin = !!process.env.REACT_APP_FACEBOOK_APP_ID;\n    const showGoogleLogin = !!process.env.REACT_APP_GOOGLE_CLIENT_ID;\n    const showSocialLogins = showFacebookLogin || showGoogleLogin;\n\n    const facebookButtonText = isLogin ? (\n      <FormattedMessage id=\"AuthenticationPage.loginWithFacebook\" />\n    ) : (\n      <FormattedMessage id=\"AuthenticationPage.signupWithFacebook\" />\n    );\n\n    const googleButtonText = isLogin ? (\n      <FormattedMessage id=\"AuthenticationPage.loginWithGoogle\" />\n    ) : (\n      <FormattedMessage id=\"AuthenticationPage.signupWithGoogle\" />\n    );\n    const socialLoginButtonsMaybe = showSocialLogins ? (\n      <div className={css.idpButtons}>\n        <div className={css.socialButtonsOr}>\n          <span className={css.socialButtonsOrText}>\n            <FormattedMessage id=\"AuthenticationPage.or\" />\n          </span>\n        </div>\n\n        {showFacebookLogin ? (\n          <div className={css.socialButtonWrapper}>\n            <SocialLoginButton onClick={() => authWithFacebook()}>\n              <span className={css.buttonIcon}>{FacebookLogo}</span>\n              {facebookButtonText}\n            </SocialLoginButton>\n          </div>\n        ) : null}\n\n        {showGoogleLogin ? (\n          <div className={css.socialButtonWrapper}>\n            <SocialLoginButton onClick={() => authWithGoogle()}>\n              <span className={css.buttonIcon}>{GoogleLogo}</span>\n              {googleButtonText}\n            </SocialLoginButton>\n          </div>\n        ) : null}\n      </div>\n    ) : null;\n\n    // Tabs for SignupForm and LoginForm\n    const authenticationForms = (\n      <div className={css.content}>\n        <LinkTabNavHorizontal className={css.tabs} tabs={tabs} />\n        {loginOrSignupError}\n\n        {isLogin ? (\n          <LoginForm className={css.loginForm} onSubmit={submitLogin} inProgress={authInProgress} />\n        ) : (\n          <SignupForm\n            className={css.signupForm}\n            onSubmit={handleSubmitSignup}\n            inProgress={authInProgress}\n            onOpenTermsOfService={() => this.setState({ tosModalOpen: true })}\n          />\n        )}\n\n        {socialLoginButtonsMaybe}\n      </div>\n    );\n\n    const formContent = isConfirm ? confirmForm : authenticationForms;\n\n    const name = user.attributes.profile.firstName;\n    const email = <span className={css.email}>{user.attributes.email}</span>;\n\n    const resendEmailLink = (\n      <InlineTextButton rootClassName={css.modalHelperLink} onClick={onResendVerificationEmail}>\n        <FormattedMessage id=\"AuthenticationPage.resendEmailLinkText\" />\n      </InlineTextButton>\n    );\n    const fixEmailLink = (\n      <NamedLink className={css.modalHelperLink} name=\"ContactDetailsPage\">\n        <FormattedMessage id=\"AuthenticationPage.fixEmailLinkText\" />\n      </NamedLink>\n    );\n\n    const resendErrorTranslationId = isTooManyEmailVerificationRequestsError(\n      sendVerificationEmailError\n    )\n      ? 'AuthenticationPage.resendFailedTooManyRequests'\n      : 'AuthenticationPage.resendFailed';\n    const resendErrorMessage = sendVerificationEmailError ? (\n      <p className={css.error}>\n        <FormattedMessage id={resendErrorTranslationId} />\n      </p>\n    ) : null;\n\n    const emailVerificationContent = (\n      <div className={css.content}>\n        <NamedLink className={css.verifyClose} name=\"ProfileSettingsPage\">\n          <span className={css.closeText}>\n            <FormattedMessage id=\"AuthenticationPage.verifyEmailClose\" />\n          </span>\n          <IconClose rootClassName={css.closeIcon} />\n        </NamedLink>\n        <IconEmailSent className={css.modalIcon} />\n        <h1 className={css.modalTitle}>\n          <FormattedMessage id=\"AuthenticationPage.verifyEmailTitle\" values={{ name }} />\n        </h1>\n        <p className={css.modalMessage}>\n          <FormattedMessage id=\"AuthenticationPage.verifyEmailText\" values={{ email }} />\n        </p>\n        {resendErrorMessage}\n\n        <div className={css.bottomWrapper}>\n          <p className={css.modalHelperText}>\n            {sendVerificationEmailInProgress ? (\n              <FormattedMessage id=\"AuthenticationPage.sendingEmail\" />\n            ) : (\n              <FormattedMessage id=\"AuthenticationPage.resendEmail\" values={{ resendEmailLink }} />\n            )}\n          </p>\n          <p className={css.modalHelperText}>\n            <FormattedMessage id=\"AuthenticationPage.fixEmail\" values={{ fixEmailLink }} />\n          </p>\n        </div>\n      </div>\n    );\n\n    const siteTitle = config.siteTitle;\n    const schemaTitle = isLogin\n      ? intl.formatMessage({ id: 'AuthenticationPage.schemaTitleLogin' }, { siteTitle })\n      : intl.formatMessage({ id: 'AuthenticationPage.schemaTitleSignup' }, { siteTitle });\n\n    const topbarClasses = classNames({\n      [css.hideOnMobile]: showEmailVerification,\n    });\n\n    return (\n      <Page\n        title={schemaTitle}\n        scrollingDisabled={scrollingDisabled}\n        schema={{\n          '@context': 'http://schema.org',\n          '@type': 'WebPage',\n          name: schemaTitle,\n        }}\n      >\n        <LayoutSingleColumn>\n          <LayoutWrapperTopbar>\n            <TopbarContainer className={topbarClasses} />\n          </LayoutWrapperTopbar>\n          <LayoutWrapperMain className={css.layoutWrapperMain}>\n            <div className={css.root}>\n              {showEmailVerification ? emailVerificationContent : formContent}\n            </div>\n            <Modal\n              id=\"AuthenticationPage.tos\"\n              isOpen={this.state.tosModalOpen}\n              onClose={() => this.setState({ tosModalOpen: false })}\n              usePortal\n              onManageDisableScrolling={onManageDisableScrolling}\n            >\n              <div className={css.termsWrapper}>\n                <h2 className={css.termsHeading}>\n                  <FormattedMessage id=\"AuthenticationPage.termsHeading\" />\n                </h2>\n                <TermsOfService />\n              </div>\n            </Modal>\n          </LayoutWrapperMain>\n          <LayoutWrapperFooter>\n            <Footer />\n          </LayoutWrapperFooter>\n        </LayoutSingleColumn>\n      </Page>\n    );\n  }\n}\n\nAuthenticationPageComponent.defaultProps = {\n  currentUser: null,\n  loginError: null,\n  signupError: null,\n  confirmError: null,\n  tab: 'signup',\n  sendVerificationEmailError: null,\n  showSocialLoginsForTests: false,\n};\n\nconst { bool, func, object, oneOf, shape } = PropTypes;\n\nAuthenticationPageComponent.propTypes = {\n  authInProgress: bool.isRequired,\n  currentUser: propTypes.currentUser,\n  isAuthenticated: bool.isRequired,\n  loginError: propTypes.error,\n  scrollingDisabled: bool.isRequired,\n  signupError: propTypes.error,\n  confirmError: propTypes.error,\n\n  submitLogin: func.isRequired,\n  submitSignup: func.isRequired,\n  tab: oneOf(['login', 'signup', 'confirm']),\n\n  sendVerificationEmailInProgress: bool.isRequired,\n  sendVerificationEmailError: propTypes.error,\n  onResendVerificationEmail: func.isRequired,\n  onManageDisableScrolling: func.isRequired,\n\n  // from withRouter\n  location: shape({ state: object }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { isAuthenticated, loginError, signupError, confirmError } = state.Auth;\n  const { currentUser, sendVerificationEmailInProgress, sendVerificationEmailError } = state.user;\n  return {\n    authInProgress: authenticationInProgress(state),\n    currentUser,\n    isAuthenticated,\n    loginError,\n    scrollingDisabled: isScrollingDisabled(state),\n    signupError,\n    confirmError,\n    sendVerificationEmailInProgress,\n    sendVerificationEmailError,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  submitLogin: ({ email, password }) => dispatch(login(email, password)),\n  submitSignup: params => dispatch(signup(params)),\n  submitSingupWithIdp: params => dispatch(signupWithIdp(params)),\n  onResendVerificationEmail: () => dispatch(sendVerificationEmail()),\n  onManageDisableScrolling: (componentId, disableScrolling) =>\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\n});\n\n// Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\nconst AuthenticationPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(AuthenticationPageComponent);\n\nexport default AuthenticationPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layoutWrapperMain\":\"AuthenticationPage_layoutWrapperMain__3gWAw\",\"root\":\"AuthenticationPage_root__2RWFg\",\"content\":\"AuthenticationPage_content__3nHEa\",\"tabs\":\"AuthenticationPage_tabs__1ppTt\",\"tab\":\"AuthenticationPage_tab__1SV2L\",\"form\":\"AuthenticationPage_form__2_HuI\",\"loginForm\":\"AuthenticationPage_loginForm__HEmUQ\",\"signupForm\":\"AuthenticationPage_signupForm__bEfKv\",\"bottomWrapper\":\"AuthenticationPage_bottomWrapper__2pvFT\",\"termsWrapper\":\"AuthenticationPage_termsWrapper__uCQwW\",\"termsHeading\":\"AuthenticationPage_termsHeading__OCaVq\",\"hideOnMobile\":\"AuthenticationPage_hideOnMobile__1jvqT\",\"verifyClose\":\"AuthenticationPage_verifyClose__3W4UD\",\"closeText\":\"AuthenticationPage_closeText__1c1ZU\",\"closeIcon\":\"AuthenticationPage_closeIcon__3n_Wy\",\"modalTitle\":\"AuthenticationPage_modalTitle__3juH6\",\"modalMessage\":\"AuthenticationPage_modalMessage__xFsFe\",\"email\":\"AuthenticationPage_email__3TlJ6\",\"modalHelperLink\":\"AuthenticationPage_modalHelperLink__3NCgn\",\"modalHelperText\":\"AuthenticationPage_modalHelperText__-dwS_\",\"modalIcon\":\"AuthenticationPage_modalIcon__1g-gP\",\"error\":\"AuthenticationPage_error__1SmGR\",\"signupWithIdpTitle\":\"AuthenticationPage_signupWithIdpTitle__2aezm\",\"confirmInfoText\":\"AuthenticationPage_confirmInfoText__1dEBC\",\"buttonIcon\":\"AuthenticationPage_buttonIcon__15Qjf\",\"socialButtonWrapper\":\"AuthenticationPage_socialButtonWrapper__bNq0o\",\"socialButtonsOr\":\"AuthenticationPage_socialButtonsOr__YbZ6c\",\"socialButtonsOrText\":\"AuthenticationPage_socialButtonsOrText__34yuc\"};"],"sourceRoot":""}