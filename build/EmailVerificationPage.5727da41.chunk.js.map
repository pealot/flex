{"version":3,"sources":["containers/EmailVerificationPage/EmailVerificationPage.js","containers/EmailVerificationPage/EmailVerificationPage.module.css"],"names":["parseVerificationToken","search","verificationToken","parse","t","EmailVerificationPageComponent","props","currentUser","intl","scrollingDisabled","submitVerification","isVerified","emailVerificationInProgress","verificationError","location","title","formatMessage","id","initialValues","user","ensureCurrentUser","attributes","emailVerified","name","referrer","className","css","layoutWrapperMain","root","content","onSubmit","inProgress","defaultProps","EmailVerificationPage","compose","withRouter","connect","state","EmailVerification","verificationInProgress","isScrollingDisabled","dispatch","verify","injectIntl","module","exports"],"mappings":"kEAAA,yMAoCMA,EAAyB,SAAAC,GAC7B,IACMC,EADYC,YAAMF,GACYG,EAEpC,OAAIF,EACI,GAAN,OAAUA,GAGL,MAGIG,EAAiC,SAAAC,GAC5C,IACEC,EAQED,EARFC,YACAC,EAOEF,EAPFE,KACAC,EAMEH,EANFG,kBACAC,EAKEJ,EALFI,mBACAC,EAIEL,EAJFK,WACAC,EAGEN,EAHFM,4BACAC,EAEEP,EAFFO,kBACAC,EACER,EADFQ,SAEIC,EAAQP,EAAKQ,cAAc,CAC/BC,GAAI,gCAGAC,EAAgB,CACpBhB,kBAAmBF,EAAuBc,EAAWA,EAASb,OAAS,OAEnEkB,EAAOC,YAAkBb,GAK/B,OAAII,GAAcQ,GAAQA,EAAKE,WAAWC,cACjC,cAAC,KAAD,CAAeC,KAAK,gBAI3B,cAAC,KAAD,CAAMR,MAAOA,EAAON,kBAAmBA,EAAmBe,SAAS,SAAnE,SACE,eAAC,KAAD,WACE,cAAC,KAAD,UACE,cAAC,IAAD,MAEF,cAAC,KAAD,CAAmBC,UAAWC,IAAIC,kBAAlC,SACE,qBAAKF,UAAWC,IAAIE,KAApB,SACE,qBAAKH,UAAWC,IAAIG,QAApB,SACGV,EAAKF,GACJ,cAAC,IAAD,CACEC,cAAeA,EACfY,SAAUpB,EACVH,YAAaY,EACbY,WAAYnB,EACZC,kBAAmBA,IAGrB,cAAC,IAAD,CAAkBI,GAAG,uDAK7B,cAAC,KAAD,UACE,cAAC,IAAD,YAOVZ,EAA+B2B,aAAe,CAC5CzB,YAAa,KACbM,kBAAmB,MAoBrB,IAwBMoB,EAAwBC,kBAC5BC,aACAC,mBA1BsB,SAAAC,GACtB,IAAQ9B,EAAgB8B,EAAMlB,KAAtBZ,YACR,EAAkE8B,EAAMC,kBACxE,MAAO,CACL3B,WAFF,EAAQA,WAGNE,kBAHF,EAAoBA,kBAIlBD,4BAJF,EAAuC2B,uBAKrChC,cACAE,kBAAmB+B,YAAoBH,OAIhB,SAAAI,GAAQ,MAAK,CACtC/B,mBAAoB,YAA4B,IAAzBR,EAAwB,EAAxBA,kBACrB,OAAOuC,EAASC,YAAOxC,SAgBzByC,IAN4BT,CAO5B7B,GAEa4B,a,oBC/JfW,EAAOC,QAAU,CAAC,kBAAoB,iDAAiD,KAAO,oCAAoC,QAAU,uCAAuC,MAAQ","file":"EmailVerificationPage.5727da41.chunk.js","sourcesContent":["import React from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport { verify } from '../../ducks/EmailVerification.duck';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport { parse } from '../../util/urlHelpers';\nimport { ensureCurrentUser } from '../../util/data';\nimport {\n  Page,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n  NamedRedirect,\n} from '../../components';\nimport { EmailVerificationForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\n\nimport css from './EmailVerificationPage.module.css';\n\n/**\n  Parse verification token from URL\n\n  Returns stringified token, if the token is provided.\n\n  Returns `null` if verification token is not provided.\n\n  Please note that we need to explicitely stringify the token, because\n  the unwanted result of the `parse` method is that it automatically\n  parses the token to number.\n*/\nconst parseVerificationToken = search => {\n  const urlParams = parse(search);\n  const verificationToken = urlParams.t;\n\n  if (verificationToken) {\n    return `${verificationToken}`;\n  }\n\n  return null;\n};\n\nexport const EmailVerificationPageComponent = props => {\n  const {\n    currentUser,\n    intl,\n    scrollingDisabled,\n    submitVerification,\n    isVerified,\n    emailVerificationInProgress,\n    verificationError,\n    location,\n  } = props;\n  const title = intl.formatMessage({\n    id: 'EmailVerificationPage.title',\n  });\n\n  const initialValues = {\n    verificationToken: parseVerificationToken(location ? location.search : null),\n  };\n  const user = ensureCurrentUser(currentUser);\n\n  // The first attempt to verify email is done when the page is loaded\n  // If the verify API call is successfull and the user has verified email\n  // We can redirect user forward from email verification page.\n  if (isVerified && user && user.attributes.emailVerified) {\n    return <NamedRedirect name=\"LandingPage\" />;\n  }\n\n  return (\n    <Page title={title} scrollingDisabled={scrollingDisabled} referrer=\"origin\">\n      <LayoutSingleColumn>\n        <LayoutWrapperTopbar>\n          <TopbarContainer />\n        </LayoutWrapperTopbar>\n        <LayoutWrapperMain className={css.layoutWrapperMain}>\n          <div className={css.root}>\n            <div className={css.content}>\n              {user.id ? (\n                <EmailVerificationForm\n                  initialValues={initialValues}\n                  onSubmit={submitVerification}\n                  currentUser={user}\n                  inProgress={emailVerificationInProgress}\n                  verificationError={verificationError}\n                />\n              ) : (\n                <FormattedMessage id=\"EmailVerificationPage.loadingUserInformation\" />\n              )}\n            </div>\n          </div>\n        </LayoutWrapperMain>\n        <LayoutWrapperFooter>\n          <Footer />\n        </LayoutWrapperFooter>\n      </LayoutSingleColumn>\n    </Page>\n  );\n};\n\nEmailVerificationPageComponent.defaultProps = {\n  currentUser: null,\n  verificationError: null,\n};\n\nEmailVerificationPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  submitVerification: func.isRequired,\n  isVerified: bool,\n  emailVerificationInProgress: bool.isRequired,\n  verificationError: propTypes.error,\n\n  // from withRouter\n  location: shape({\n    search: string,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.user;\n  const { isVerified, verificationError, verificationInProgress } = state.EmailVerification;\n  return {\n    isVerified,\n    verificationError,\n    emailVerificationInProgress: verificationInProgress,\n    currentUser,\n    scrollingDisabled: isScrollingDisabled(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  submitVerification: ({ verificationToken }) => {\n    return dispatch(verify(verificationToken));\n  },\n});\n\n// Note: it is important that the withRouter HOC is **outside** the\n// connect HOC, otherwise React Router won't rerender any Route\n// components since connect implements a shouldComponentUpdate\n// lifecycle hook.\n//\n// See: https://github.com/ReactTraining/react-router/issues/4671\nconst EmailVerificationPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(EmailVerificationPageComponent);\n\nexport default EmailVerificationPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layoutWrapperMain\":\"EmailVerificationPage_layoutWrapperMain__2FPXn\",\"root\":\"EmailVerificationPage_root__2dGf8\",\"content\":\"EmailVerificationPage_content__TEBzf\",\"error\":\"EmailVerificationPage_error__10XaZ\"};"],"sourceRoot":""}