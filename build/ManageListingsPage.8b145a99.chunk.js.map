{"version":3,"sources":["containers/ManageListingsPage/ManageListingsPage.js","containers/ManageListingsPage/ManageListingsPage.module.css"],"names":["ManageListingsPageComponent","props","state","listingMenuOpen","onToggleMenu","bind","listing","this","setState","closingListing","closingListingError","listings","onCloseListing","onOpenListing","openingListing","openingListingError","pagination","queryInProgress","queryListingsError","queryParams","scrollingDisabled","intl","hasPaginationInfo","totalItems","listingsAreLoaded","loadingResults","id","queryError","className","css","error","noResults","title","heading","values","count","page","paginationLinks","totalPages","pageName","pageSearchParams","closingErrorListingId","listingId","openingErrorListingId","formatMessage","renderSizes","panelWidth","join","currentPage","selectedPageName","listingPanel","listingCards","map","l","listingCard","isMenuOpen","uuid","actionsInProgressListingId","hasOpeningError","hasClosingError","Component","defaultProps","PropTypes","arrayOf","bool","func","object","shape","string","ManageListingsPage","compose","connect","currentPageResultIds","getOwnListingsById","isScrollingDisabled","dispatch","closeListing","openListing","injectIntl","module","exports"],"mappings":"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","file":"ManageListingsPage.8b145a99.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  ManageListingCard,\n  Page,\n  PaginationLinks,\n  UserNav,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n} from '../../components';\nimport { TopbarContainer } from '../../containers';\n\nimport { closeListing, openListing, getOwnListingsById } from './ManageListingsPage.duck';\nimport css from './ManageListingsPage.module.css';\n\nexport class ManageListingsPageComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { listingMenuOpen: null };\n    this.onToggleMenu = this.onToggleMenu.bind(this);\n  }\n\n  onToggleMenu(listing) {\n    this.setState({ listingMenuOpen: listing });\n  }\n\n  render() {\n    const {\n      closingListing,\n      closingListingError,\n      listings,\n      onCloseListing,\n      onOpenListing,\n      openingListing,\n      openingListingError,\n      pagination,\n      queryInProgress,\n      queryListingsError,\n      queryParams,\n      scrollingDisabled,\n      intl,\n    } = this.props;\n\n    const hasPaginationInfo = !!pagination && pagination.totalItems != null;\n    const listingsAreLoaded = !queryInProgress && hasPaginationInfo;\n\n    const loadingResults = (\n      <h2>\n        <FormattedMessage id=\"ManageListingsPage.loadingOwnListings\" />\n      </h2>\n    );\n\n    const queryError = (\n      <h2 className={css.error}>\n        <FormattedMessage id=\"ManageListingsPage.queryError\" />\n      </h2>\n    );\n\n    const noResults =\n      listingsAreLoaded && pagination.totalItems === 0 ? (\n        <h1 className={css.title}>\n          <FormattedMessage id=\"ManageListingsPage.noResults\" />\n        </h1>\n      ) : null;\n\n    const heading =\n      listingsAreLoaded && pagination.totalItems > 0 ? (\n        <h1 className={css.title}>\n          <FormattedMessage\n            id=\"ManageListingsPage.youHaveListings\"\n            values={{ count: pagination.totalItems }}\n          />\n        </h1>\n      ) : (\n        noResults\n      );\n\n    const page = queryParams ? queryParams.page : 1;\n    const paginationLinks =\n      listingsAreLoaded && pagination && pagination.totalPages > 1 ? (\n        <PaginationLinks\n          className={css.pagination}\n          pageName=\"ManageListingsPage\"\n          pageSearchParams={{ page }}\n          pagination={pagination}\n        />\n      ) : null;\n\n    const listingMenuOpen = this.state.listingMenuOpen;\n    const closingErrorListingId = !!closingListingError && closingListingError.listingId;\n    const openingErrorListingId = !!openingListingError && openingListingError.listingId;\n\n    const title = intl.formatMessage({ id: 'ManageListingsPage.title' });\n\n    const panelWidth = 62.5;\n    // Render hints for responsive image\n    const renderSizes = [\n      `(max-width: 767px) 100vw`,\n      `(max-width: 1920px) ${panelWidth / 2}vw`,\n      `${panelWidth / 3}vw`,\n    ].join(', ');\n\n    return (\n      <Page title={title} scrollingDisabled={scrollingDisabled}>\n        <LayoutSingleColumn>\n          <LayoutWrapperTopbar>\n            <TopbarContainer currentPage=\"ManageListingsPage\" />\n            <UserNav selectedPageName=\"ManageListingsPage\" />\n          </LayoutWrapperTopbar>\n          <LayoutWrapperMain>\n            {queryInProgress ? loadingResults : null}\n            {queryListingsError ? queryError : null}\n            <div className={css.listingPanel}>\n              {heading}\n              <div className={css.listingCards}>\n                {listings.map(l => (\n                  <ManageListingCard\n                    className={css.listingCard}\n                    key={l.id.uuid}\n                    listing={l}\n                    isMenuOpen={!!listingMenuOpen && listingMenuOpen.id.uuid === l.id.uuid}\n                    actionsInProgressListingId={openingListing || closingListing}\n                    onToggleMenu={this.onToggleMenu}\n                    onCloseListing={onCloseListing}\n                    onOpenListing={onOpenListing}\n                    hasOpeningError={openingErrorListingId.uuid === l.id.uuid}\n                    hasClosingError={closingErrorListingId.uuid === l.id.uuid}\n                    renderSizes={renderSizes}\n                  />\n                ))}\n              </div>\n              {paginationLinks}\n            </div>\n          </LayoutWrapperMain>\n          <LayoutWrapperFooter>\n            <Footer />\n          </LayoutWrapperFooter>\n        </LayoutSingleColumn>\n      </Page>\n    );\n  }\n}\n\nManageListingsPageComponent.defaultProps = {\n  listings: [],\n  pagination: null,\n  queryListingsError: null,\n  queryParams: null,\n  closingListing: null,\n  closingListingError: null,\n  openingListing: null,\n  openingListingError: null,\n};\n\nconst { arrayOf, bool, func, object, shape, string } = PropTypes;\n\nManageListingsPageComponent.propTypes = {\n  closingListing: shape({ uuid: string.isRequired }),\n  closingListingError: shape({\n    listingId: propTypes.uuid.isRequired,\n    error: propTypes.error.isRequired,\n  }),\n  listings: arrayOf(propTypes.ownListing),\n  onCloseListing: func.isRequired,\n  onOpenListing: func.isRequired,\n  openingListing: shape({ uuid: string.isRequired }),\n  openingListingError: shape({\n    listingId: propTypes.uuid.isRequired,\n    error: propTypes.error.isRequired,\n  }),\n  pagination: propTypes.pagination,\n  queryInProgress: bool.isRequired,\n  queryListingsError: propTypes.error,\n  queryParams: object,\n  scrollingDisabled: bool.isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const {\n    currentPageResultIds,\n    pagination,\n    queryInProgress,\n    queryListingsError,\n    queryParams,\n    openingListing,\n    openingListingError,\n    closingListing,\n    closingListingError,\n  } = state.ManageListingsPage;\n  const listings = getOwnListingsById(state, currentPageResultIds);\n  return {\n    currentPageResultIds,\n    listings,\n    pagination,\n    queryInProgress,\n    queryListingsError,\n    queryParams,\n    scrollingDisabled: isScrollingDisabled(state),\n    openingListing,\n    openingListingError,\n    closingListing,\n    closingListingError,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onCloseListing: listingId => dispatch(closeListing(listingId)),\n  onOpenListing: listingId => dispatch(openListing(listingId)),\n});\n\nconst ManageListingsPage = compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(ManageListingsPageComponent);\n\nexport default ManageListingsPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ManageListingsPage_root__3Z8aD\",\"tabs\":\"ManageListingsPage_tabs__2vho7\",\"tab\":\"ManageListingsPage_tab__5TZih\",\"listingPanel\":\"ManageListingsPage_listingPanel__2lS1t\",\"title\":\"ManageListingsPage_title__19XlY\",\"listingCards\":\"ManageListingsPage_listingCards__1CQBq\",\"listingCard\":\"ManageListingsPage_listingCard__2r_wV\",\"pagination\":\"ManageListingsPage_pagination__3ThWX\"};"],"sourceRoot":""}