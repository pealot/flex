{"version":3,"sources":["containers/ProfileSettingsPage/ProfileSettingsPage.js","containers/ProfileSettingsPage/ProfileSettingsPage.module.css"],"names":["ProfileSettingsPageComponent","this","props","currentUser","image","onImageUpload","onUpdateProfile","scrollingDisabled","updateInProgress","updateProfileError","uploadImageError","uploadInProgress","intl","user","ensureCurrentUser","attributes","profile","firstName","lastName","bio","profileImageId","profileImage","id","imageId","profileSettingsForm","className","css","form","initialValues","e","values","fn","file","onImageUploadHandler","onSubmit","trim","uploadedImage","updatedValues","title","formatMessage","root","currentPage","selectedPageName","content","headingContainer","heading","profileLink","name","params","uuid","Component","defaultProps","PropTypes","bool","func","object","shape","string","ProfileSettingsPage","compose","connect","state","isScrollingDisabled","dispatch","data","uploadImage","updateProfile","injectIntl","module","exports"],"mappings":"gWA+BaA,EAAb,4HACE,WAAU,IAAD,OACP,EAWIC,KAAKC,MAVPC,EADF,EACEA,YACAC,EAFF,EAEEA,MACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,gBACAC,EALF,EAKEA,kBACAC,EANF,EAMEA,iBACAC,EAPF,EAOEA,mBACAC,EARF,EAQEA,iBACAC,EATF,EASEA,iBACAC,EAVF,EAUEA,KAyBIC,EAAOC,YAAkBX,GAC/B,EAAqCU,EAAKE,WAAWC,QAA7CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SAAUC,EAA7B,EAA6BA,IACvBC,EAAiBP,EAAKQ,aAAeR,EAAKQ,aAAaC,GAAK,KAC5DD,EAAejB,GAAS,CAAEmB,QAASH,GAEnCI,EAAsBX,EAAKS,GAC/B,cAAC,IAAD,CACEG,UAAWC,IAAIC,KACfxB,YAAaA,EACbyB,cAAe,CAAEX,YAAWC,WAAUC,MAAKE,aAAcR,EAAKQ,cAC9DA,aAAcA,EACdhB,cAAe,SAAAwB,GAAC,OAvDK,SAACC,EAAQC,GACpC,IAAQT,EAAsBQ,EAAtBR,GAAIC,EAAkBO,EAAlBP,QAASS,EAASF,EAATE,KACjBA,GACFD,EAAG,CAAET,KAAIC,UAASS,SAoDMC,CAAqBJ,EAAGxB,IAC5CM,iBAAkBA,EAClBH,iBAAkBA,EAClBE,iBAAkBA,EAClBD,mBAAoBA,EACpByB,SAtCiB,SAAAJ,GACnB,IAAQb,EAAqCa,EAArCb,UAAWC,EAA0BY,EAA1BZ,SAGbC,EAHuCW,EAAhBX,KAGP,GAEhBH,EAAU,CACdC,UAAWA,EAAUkB,OACrBjB,SAAUA,EAASiB,OACnBhB,OAEIiB,EAAgB,EAAKlC,MAAME,MAG3BiC,EACJD,GAAiBA,EAAcb,SAAWa,EAAcJ,KAAxD,WACShB,GADT,IACkBI,eAAgBgB,EAAcb,UAC5CP,EAENV,EAAgB+B,MAqBd,KAEEC,EAAQ1B,EAAK2B,cAAc,CAAEjB,GAAI,8BAEvC,OACE,cAAC,KAAD,CAAMG,UAAWC,IAAIc,KAAMF,MAAOA,EAAO/B,kBAAmBA,EAA5D,SACE,eAAC,KAAD,WACE,eAAC,KAAD,WACE,cAAC,IAAD,CAAiBkC,YAAY,wBAC7B,cAAC,KAAD,CAASC,iBAAiB,2BAE5B,cAAC,KAAD,UACE,sBAAKjB,UAAWC,IAAIiB,QAApB,UACE,sBAAKlB,UAAWC,IAAIkB,iBAApB,UACE,oBAAInB,UAAWC,IAAImB,QAAnB,SACE,cAAC,IAAD,CAAkBvB,GAAG,kCAEtBT,EAAKS,GACJ,cAAC,KAAD,CACEG,UAAWC,IAAIoB,YACfC,KAAK,cACLC,OAAQ,CAAE1B,GAAIT,EAAKS,GAAG2B,MAHxB,SAKE,cAAC,IAAD,CAAkB3B,GAAG,0CAErB,QAELE,OAGL,cAAC,KAAD,UACE,cAAC,IAAD,eAtFZ,GAAkD0B,aA8FlDlD,EAA6BmD,aAAe,CAC1ChD,YAAa,KACbO,iBAAkB,KAClBD,mBAAoB,KACpBL,MAAO,MAGqCgD,IAAtCC,KAAsCD,IAAhCE,KAAgCF,IAA1BG,OAA0BH,IAAlBI,MAAkBJ,IAAXK,OAAnC,IA+CMC,EAAsBC,kBAC1BC,mBA1BsB,SAAAC,GACtB,IAAQ1D,EAAgB0D,EAAMhD,KAAtBV,YACR,EAMI0D,EAAMH,oBALRtD,EADF,EACEA,MACAM,EAFF,EAEEA,iBACAC,EAHF,EAGEA,iBACAH,EAJF,EAIEA,iBACAC,EALF,EAKEA,mBAEF,MAAO,CACLN,cACAC,QACAG,kBAAmBuD,YAAoBD,GACvCrD,mBACAC,qBACAC,mBACAC,uBAIuB,SAAAoD,GAAQ,MAAK,CACtC1D,cAAe,SAAA2D,GAAI,OAAID,EAASE,YAAYD,KAC5C1D,gBAAiB,SAAA0D,GAAI,OAAID,EAASG,YAAcF,SAQhDG,IAL0BR,CAM1B3D,GAEa0D,a,oBC1LfU,EAAOC,QAAU,CAAC,KAAO,kCAAkC,QAAU,qCAAqC,iBAAmB,8CAA8C,QAAU,qCAAqC,YAAc","file":"ProfileSettingsPage.347a8a8c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { propTypes } from '../../util/types';\nimport { ensureCurrentUser } from '../../util/data';\nimport { isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  Page,\n  UserNav,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n  NamedLink,\n} from '../../components';\nimport { ProfileSettingsForm } from '../../forms';\nimport { TopbarContainer } from '../../containers';\n\nimport { updateProfile, uploadImage } from './ProfileSettingsPage.duck';\nimport css from './ProfileSettingsPage.module.css';\n\nconst onImageUploadHandler = (values, fn) => {\n  const { id, imageId, file } = values;\n  if (file) {\n    fn({ id, imageId, file });\n  }\n};\n\nexport class ProfileSettingsPageComponent extends Component {\n  render() {\n    const {\n      currentUser,\n      image,\n      onImageUpload,\n      onUpdateProfile,\n      scrollingDisabled,\n      updateInProgress,\n      updateProfileError,\n      uploadImageError,\n      uploadInProgress,\n      intl,\n    } = this.props;\n\n    const handleSubmit = values => {\n      const { firstName, lastName, bio: rawBio } = values;\n\n      // Ensure that the optional bio is a string\n      const bio = rawBio || '';\n\n      const profile = {\n        firstName: firstName.trim(),\n        lastName: lastName.trim(),\n        bio,\n      };\n      const uploadedImage = this.props.image;\n\n      // Update profileImage only if file system has been accessed\n      const updatedValues =\n        uploadedImage && uploadedImage.imageId && uploadedImage.file\n          ? { ...profile, profileImageId: uploadedImage.imageId }\n          : profile;\n\n      onUpdateProfile(updatedValues);\n    };\n\n    const user = ensureCurrentUser(currentUser);\n    const { firstName, lastName, bio } = user.attributes.profile;\n    const profileImageId = user.profileImage ? user.profileImage.id : null;\n    const profileImage = image || { imageId: profileImageId };\n\n    const profileSettingsForm = user.id ? (\n      <ProfileSettingsForm\n        className={css.form}\n        currentUser={currentUser}\n        initialValues={{ firstName, lastName, bio, profileImage: user.profileImage }}\n        profileImage={profileImage}\n        onImageUpload={e => onImageUploadHandler(e, onImageUpload)}\n        uploadInProgress={uploadInProgress}\n        updateInProgress={updateInProgress}\n        uploadImageError={uploadImageError}\n        updateProfileError={updateProfileError}\n        onSubmit={handleSubmit}\n      />\n    ) : null;\n\n    const title = intl.formatMessage({ id: 'ProfileSettingsPage.title' });\n\n    return (\n      <Page className={css.root} title={title} scrollingDisabled={scrollingDisabled}>\n        <LayoutSingleColumn>\n          <LayoutWrapperTopbar>\n            <TopbarContainer currentPage=\"ProfileSettingsPage\" />\n            <UserNav selectedPageName=\"ProfileSettingsPage\" />\n          </LayoutWrapperTopbar>\n          <LayoutWrapperMain>\n            <div className={css.content}>\n              <div className={css.headingContainer}>\n                <h1 className={css.heading}>\n                  <FormattedMessage id=\"ProfileSettingsPage.heading\" />\n                </h1>\n                {user.id ? (\n                  <NamedLink\n                    className={css.profileLink}\n                    name=\"ProfilePage\"\n                    params={{ id: user.id.uuid }}\n                  >\n                    <FormattedMessage id=\"ProfileSettingsPage.viewProfileLink\" />\n                  </NamedLink>\n                ) : null}\n              </div>\n              {profileSettingsForm}\n            </div>\n          </LayoutWrapperMain>\n          <LayoutWrapperFooter>\n            <Footer />\n          </LayoutWrapperFooter>\n        </LayoutSingleColumn>\n      </Page>\n    );\n  }\n}\n\nProfileSettingsPageComponent.defaultProps = {\n  currentUser: null,\n  uploadImageError: null,\n  updateProfileError: null,\n  image: null,\n};\n\nconst { bool, func, object, shape, string } = PropTypes;\n\nProfileSettingsPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  image: shape({\n    id: string,\n    imageId: propTypes.uuid,\n    file: object,\n    uploadedImage: propTypes.image,\n  }),\n  onImageUpload: func.isRequired,\n  onUpdateProfile: func.isRequired,\n  scrollingDisabled: bool.isRequired,\n  updateInProgress: bool.isRequired,\n  updateProfileError: propTypes.error,\n  uploadImageError: propTypes.error,\n  uploadInProgress: bool.isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.user;\n  const {\n    image,\n    uploadImageError,\n    uploadInProgress,\n    updateInProgress,\n    updateProfileError,\n  } = state.ProfileSettingsPage;\n  return {\n    currentUser,\n    image,\n    scrollingDisabled: isScrollingDisabled(state),\n    updateInProgress,\n    updateProfileError,\n    uploadImageError,\n    uploadInProgress,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onImageUpload: data => dispatch(uploadImage(data)),\n  onUpdateProfile: data => dispatch(updateProfile(data)),\n});\n\nconst ProfileSettingsPage = compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(ProfileSettingsPageComponent);\n\nexport default ProfileSettingsPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ProfileSettingsPage_root__2k5ZE\",\"content\":\"ProfileSettingsPage_content__11Fax\",\"headingContainer\":\"ProfileSettingsPage_headingContainer__1UO6g\",\"heading\":\"ProfileSettingsPage_heading__3R5xH\",\"profileLink\":\"ProfileSettingsPage_profileLink__1LeCk\"};"],"sourceRoot":""}