{"version":3,"sources":["containers/TransactionPage/TransactionPage.js","containers/TransactionPage/TransactionPage.module.css"],"names":["TransactionPageComponent","props","currentUser","initialMessageFailedToTransaction","savePaymentMethodFailed","fetchMessagesError","fetchMessagesInProgress","totalMessagePages","oldestMessagePageFetched","fetchTransactionError","history","intl","messages","onManageDisableScrolling","onSendMessage","onSendReview","onShowMoreMessages","params","scrollingDisabled","sendMessageError","sendMessageInProgress","sendReviewError","sendReviewInProgress","transaction","transactionRole","acceptInProgress","acceptSaleError","declineInProgress","declineSaleError","onAcceptSale","onDeclineSale","timeSlots","fetchTimeSlotsError","processTransitions","callSetInitialValues","onInitializeCardPaymentData","onFetchTransactionLineItems","lineItems","fetchLineItemsInProgress","fetchLineItemsError","currentTransaction","ensureTransaction","currentListing","ensureListing","listing","isProviderRole","isCustomerRole","redirectToCheckoutPageWithInitialValues","initialValues","routes","routeConfiguration","setInitialValues","findRouteByRouteName","push","createResourceLocatorString","id","uuid","slug","createSlug","attributes","title","txIsPaymentPending","currentBooking","booking","bookingData","bookingDates","bookingStart","dateFromAPIToLocalNoon","start","bookingEnd","end","deletedListingTitle","formatMessage","listingTitle","deleted","isDataAvailable","customer","provider","isOwnSale","isOwnOrder","console","error","name","tab","detailsClassName","classNames","css","tabContent","tabContentVisible","fetchErrorMessage","loadingMessage","loadingOrFailedFetching","className","loading","initialMessageFailed","panel","nextTransitions","onSubmitBookingRequest","values","startDate","endDate","confirmPaymentError","root","footer","defaultProps","PropTypes","bool","func","oneOf","shape","string","array","arrayOf","number","TransactionPage","compose","withRouter","connect","state","transactionRef","user","transactions","getMarketplaceEntities","length","isScrollingDisabled","dispatch","transactionId","acceptSale","declineSale","txId","fetchMoreMessages","message","sendMessage","componentId","disableScrolling","manageDisableScrolling","role","tx","reviewRating","reviewContent","sendReview","initializeCardPaymentData","listingId","isOwnListing","fetchTransactionLineItems","injectIntl","module","exports"],"mappings":"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","file":"TransactionPage.8c8f647a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { FormattedMessage, intlShape, injectIntl } from '../../util/reactIntl';\nimport { createResourceLocatorString, findRouteByRouteName } from '../../util/routes';\nimport routeConfiguration from '../../routeConfiguration';\nimport { propTypes } from '../../util/types';\nimport { ensureListing, ensureTransaction } from '../../util/data';\nimport { dateFromAPIToLocalNoon } from '../../util/dates';\nimport { createSlug } from '../../util/urlHelpers';\nimport { txIsPaymentPending } from '../../util/transaction';\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\nimport { isScrollingDisabled, manageDisableScrolling } from '../../ducks/UI.duck';\nimport { initializeCardPaymentData } from '../../ducks/stripe.duck.js';\nimport {\n  NamedRedirect,\n  TransactionPanel,\n  Page,\n  LayoutSingleColumn,\n  LayoutWrapperTopbar,\n  LayoutWrapperMain,\n  LayoutWrapperFooter,\n  Footer,\n} from '../../components';\nimport { TopbarContainer } from '../../containers';\n\nimport {\n  acceptSale,\n  declineSale,\n  sendMessage,\n  sendReview,\n  fetchMoreMessages,\n  fetchTransactionLineItems,\n} from './TransactionPage.duck';\nimport css from './TransactionPage.module.css';\n\nconst PROVIDER = 'provider';\nconst CUSTOMER = 'customer';\n\n// TransactionPage handles data loading for Sale and Order views to transaction pages in Inbox.\nexport const TransactionPageComponent = props => {\n  const {\n    currentUser,\n    initialMessageFailedToTransaction,\n    savePaymentMethodFailed,\n    fetchMessagesError,\n    fetchMessagesInProgress,\n    totalMessagePages,\n    oldestMessagePageFetched,\n    fetchTransactionError,\n    history,\n    intl,\n    messages,\n    onManageDisableScrolling,\n    onSendMessage,\n    onSendReview,\n    onShowMoreMessages,\n    params,\n    scrollingDisabled,\n    sendMessageError,\n    sendMessageInProgress,\n    sendReviewError,\n    sendReviewInProgress,\n    transaction,\n    transactionRole,\n    acceptInProgress,\n    acceptSaleError,\n    declineInProgress,\n    declineSaleError,\n    onAcceptSale,\n    onDeclineSale,\n    timeSlots,\n    fetchTimeSlotsError,\n    processTransitions,\n    callSetInitialValues,\n    onInitializeCardPaymentData,\n    onFetchTransactionLineItems,\n    lineItems,\n    fetchLineItemsInProgress,\n    fetchLineItemsError,\n  } = props;\n\n  const currentTransaction = ensureTransaction(transaction);\n  const currentListing = ensureListing(currentTransaction.listing);\n  const isProviderRole = transactionRole === PROVIDER;\n  const isCustomerRole = transactionRole === CUSTOMER;\n\n  const redirectToCheckoutPageWithInitialValues = (initialValues, listing) => {\n    const routes = routeConfiguration();\n    // Customize checkout page state with current listing and selected bookingDates\n    const { setInitialValues } = findRouteByRouteName('CheckoutPage', routes);\n    callSetInitialValues(setInitialValues, initialValues);\n\n    // Clear previous Stripe errors from store if there is any\n    onInitializeCardPaymentData();\n\n    // Redirect to CheckoutPage\n    history.push(\n      createResourceLocatorString(\n        'CheckoutPage',\n        routes,\n        { id: currentListing.id.uuid, slug: createSlug(currentListing.attributes.title) },\n        {}\n      )\n    );\n  };\n\n  // If payment is pending, redirect to CheckoutPage\n  if (\n    txIsPaymentPending(currentTransaction) &&\n    isCustomerRole &&\n    currentTransaction.attributes.lineItems\n  ) {\n    const currentBooking = ensureListing(currentTransaction.booking);\n\n    const initialValues = {\n      listing: currentListing,\n      // Transaction with payment pending should be passed to CheckoutPage\n      transaction: currentTransaction,\n      // Original bookingData content is not available,\n      // but it is already used since booking is created.\n      // (E.g. quantity is used when booking is created.)\n      bookingData: {},\n      bookingDates: {\n        bookingStart: dateFromAPIToLocalNoon(currentBooking.attributes.start),\n        bookingEnd: dateFromAPIToLocalNoon(currentBooking.attributes.end),\n      },\n    };\n\n    redirectToCheckoutPageWithInitialValues(initialValues, currentListing);\n  }\n\n  // Customer can create a booking, if the tx is in \"enquiry\" state.\n  const handleSubmitBookingRequest = values => {\n    const { bookingDates, ...bookingData } = values;\n\n    const initialValues = {\n      listing: currentListing,\n      // enquired transaction should be passed to CheckoutPage\n      transaction: currentTransaction,\n      bookingData,\n      bookingDates: {\n        bookingStart: bookingDates.startDate,\n        bookingEnd: bookingDates.endDate,\n      },\n      confirmPaymentError: null,\n    };\n\n    redirectToCheckoutPageWithInitialValues(initialValues, currentListing);\n  };\n\n  const deletedListingTitle = intl.formatMessage({\n    id: 'TransactionPage.deletedListing',\n  });\n  const listingTitle = currentListing.attributes.deleted\n    ? deletedListingTitle\n    : currentListing.attributes.title;\n\n  // Redirect users with someone else's direct link to their own inbox/sales or inbox/orders page.\n  const isDataAvailable =\n    currentUser &&\n    currentTransaction.id &&\n    currentTransaction.id.uuid === params.id &&\n    currentTransaction.attributes.lineItems &&\n    currentTransaction.customer &&\n    currentTransaction.provider &&\n    !fetchTransactionError;\n\n  const isOwnSale =\n    isDataAvailable &&\n    isProviderRole &&\n    currentUser.id.uuid === currentTransaction.provider.id.uuid;\n  const isOwnOrder =\n    isDataAvailable &&\n    isCustomerRole &&\n    currentUser.id.uuid === currentTransaction.customer.id.uuid;\n\n  if (isDataAvailable && isProviderRole && !isOwnSale) {\n    // eslint-disable-next-line no-console\n    console.error('Tried to access a sale that was not owned by the current user');\n    return <NamedRedirect name=\"InboxPage\" params={{ tab: 'sales' }} />;\n  } else if (isDataAvailable && isCustomerRole && !isOwnOrder) {\n    // eslint-disable-next-line no-console\n    console.error('Tried to access an order that was not owned by the current user');\n    return <NamedRedirect name=\"InboxPage\" params={{ tab: 'orders' }} />;\n  }\n\n  const detailsClassName = classNames(css.tabContent, css.tabContentVisible);\n\n  const fetchErrorMessage = isCustomerRole\n    ? 'TransactionPage.fetchOrderFailed'\n    : 'TransactionPage.fetchSaleFailed';\n  const loadingMessage = isCustomerRole\n    ? 'TransactionPage.loadingOrderData'\n    : 'TransactionPage.loadingSaleData';\n\n  const loadingOrFailedFetching = fetchTransactionError ? (\n    <p className={css.error}>\n      <FormattedMessage id={`${fetchErrorMessage}`} />\n    </p>\n  ) : (\n    <p className={css.loading}>\n      <FormattedMessage id={`${loadingMessage}`} />\n    </p>\n  );\n\n  const initialMessageFailed = !!(\n    initialMessageFailedToTransaction &&\n    currentTransaction.id &&\n    initialMessageFailedToTransaction.uuid === currentTransaction.id.uuid\n  );\n\n  // TransactionPanel is presentational component\n  // that currently handles showing everything inside layout's main view area.\n  const panel = isDataAvailable ? (\n    <TransactionPanel\n      className={detailsClassName}\n      currentUser={currentUser}\n      transaction={currentTransaction}\n      fetchMessagesInProgress={fetchMessagesInProgress}\n      totalMessagePages={totalMessagePages}\n      oldestMessagePageFetched={oldestMessagePageFetched}\n      messages={messages}\n      initialMessageFailed={initialMessageFailed}\n      savePaymentMethodFailed={savePaymentMethodFailed}\n      fetchMessagesError={fetchMessagesError}\n      sendMessageInProgress={sendMessageInProgress}\n      sendMessageError={sendMessageError}\n      sendReviewInProgress={sendReviewInProgress}\n      sendReviewError={sendReviewError}\n      onManageDisableScrolling={onManageDisableScrolling}\n      onShowMoreMessages={onShowMoreMessages}\n      onSendMessage={onSendMessage}\n      onSendReview={onSendReview}\n      transactionRole={transactionRole}\n      onAcceptSale={onAcceptSale}\n      onDeclineSale={onDeclineSale}\n      acceptInProgress={acceptInProgress}\n      declineInProgress={declineInProgress}\n      acceptSaleError={acceptSaleError}\n      declineSaleError={declineSaleError}\n      nextTransitions={processTransitions}\n      onSubmitBookingRequest={handleSubmitBookingRequest}\n      timeSlots={timeSlots}\n      fetchTimeSlotsError={fetchTimeSlotsError}\n      onFetchTransactionLineItems={onFetchTransactionLineItems}\n      lineItems={lineItems}\n      fetchLineItemsInProgress={fetchLineItemsInProgress}\n      fetchLineItemsError={fetchLineItemsError}\n    />\n  ) : (\n    loadingOrFailedFetching\n  );\n\n  return (\n    <Page\n      title={intl.formatMessage({ id: 'TransactionPage.title' }, { title: listingTitle })}\n      scrollingDisabled={scrollingDisabled}\n    >\n      <LayoutSingleColumn>\n        <LayoutWrapperTopbar>\n          <TopbarContainer />\n        </LayoutWrapperTopbar>\n        <LayoutWrapperMain>\n          <div className={css.root}>{panel}</div>\n        </LayoutWrapperMain>\n        <LayoutWrapperFooter className={css.footer}>\n          <Footer />\n        </LayoutWrapperFooter>\n      </LayoutSingleColumn>\n    </Page>\n  );\n};\n\nTransactionPageComponent.defaultProps = {\n  currentUser: null,\n  fetchTransactionError: null,\n  acceptSaleError: null,\n  declineSaleError: null,\n  transaction: null,\n  fetchMessagesError: null,\n  initialMessageFailedToTransaction: null,\n  savePaymentMethodFailed: false,\n  sendMessageError: null,\n  timeSlots: null,\n  fetchTimeSlotsError: null,\n  lineItems: null,\n  fetchLineItemsError: null,\n};\n\nconst { bool, func, oneOf, shape, string, array, arrayOf, number } = PropTypes;\n\nTransactionPageComponent.propTypes = {\n  params: shape({ id: string }).isRequired,\n  transactionRole: oneOf([PROVIDER, CUSTOMER]).isRequired,\n  currentUser: propTypes.currentUser,\n  fetchTransactionError: propTypes.error,\n  acceptSaleError: propTypes.error,\n  declineSaleError: propTypes.error,\n  acceptInProgress: bool.isRequired,\n  declineInProgress: bool.isRequired,\n  onAcceptSale: func.isRequired,\n  onDeclineSale: func.isRequired,\n  scrollingDisabled: bool.isRequired,\n  transaction: propTypes.transaction,\n  fetchMessagesError: propTypes.error,\n  totalMessagePages: number.isRequired,\n  oldestMessagePageFetched: number.isRequired,\n  messages: arrayOf(propTypes.message).isRequired,\n  initialMessageFailedToTransaction: propTypes.uuid,\n  savePaymentMethodFailed: bool,\n  sendMessageInProgress: bool.isRequired,\n  sendMessageError: propTypes.error,\n  onShowMoreMessages: func.isRequired,\n  onSendMessage: func.isRequired,\n  timeSlots: arrayOf(propTypes.timeSlot),\n  fetchTimeSlotsError: propTypes.error,\n  callSetInitialValues: func.isRequired,\n  onInitializeCardPaymentData: func.isRequired,\n  onFetchTransactionLineItems: func.isRequired,\n\n  // line items\n  lineItems: array,\n  fetchLineItemsInProgress: bool.isRequired,\n  fetchLineItemsError: propTypes.error,\n\n  // from withRouter\n  history: shape({\n    push: func.isRequired,\n  }).isRequired,\n  location: shape({\n    search: string,\n  }).isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const {\n    fetchTransactionError,\n    acceptSaleError,\n    declineSaleError,\n    acceptInProgress,\n    declineInProgress,\n    transactionRef,\n    fetchMessagesInProgress,\n    fetchMessagesError,\n    totalMessagePages,\n    oldestMessagePageFetched,\n    messages,\n    initialMessageFailedToTransaction,\n    savePaymentMethodFailed,\n    sendMessageInProgress,\n    sendMessageError,\n    sendReviewInProgress,\n    sendReviewError,\n    timeSlots,\n    fetchTimeSlotsError,\n    processTransitions,\n    lineItems,\n    fetchLineItemsInProgress,\n    fetchLineItemsError,\n  } = state.TransactionPage;\n  const { currentUser } = state.user;\n\n  const transactions = getMarketplaceEntities(state, transactionRef ? [transactionRef] : []);\n  const transaction = transactions.length > 0 ? transactions[0] : null;\n\n  return {\n    currentUser,\n    fetchTransactionError,\n    acceptSaleError,\n    declineSaleError,\n    acceptInProgress,\n    declineInProgress,\n    scrollingDisabled: isScrollingDisabled(state),\n    transaction,\n    fetchMessagesInProgress,\n    fetchMessagesError,\n    totalMessagePages,\n    oldestMessagePageFetched,\n    messages,\n    initialMessageFailedToTransaction,\n    savePaymentMethodFailed,\n    sendMessageInProgress,\n    sendMessageError,\n    sendReviewInProgress,\n    sendReviewError,\n    timeSlots,\n    fetchTimeSlotsError,\n    processTransitions,\n    lineItems,\n    fetchLineItemsInProgress,\n    fetchLineItemsError,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAcceptSale: transactionId => dispatch(acceptSale(transactionId)),\n    onDeclineSale: transactionId => dispatch(declineSale(transactionId)),\n    onShowMoreMessages: txId => dispatch(fetchMoreMessages(txId)),\n    onSendMessage: (txId, message) => dispatch(sendMessage(txId, message)),\n    onManageDisableScrolling: (componentId, disableScrolling) =>\n      dispatch(manageDisableScrolling(componentId, disableScrolling)),\n    onSendReview: (role, tx, reviewRating, reviewContent) =>\n      dispatch(sendReview(role, tx, reviewRating, reviewContent)),\n    callSetInitialValues: (setInitialValues, values) => dispatch(setInitialValues(values)),\n    onInitializeCardPaymentData: () => dispatch(initializeCardPaymentData()),\n    onFetchTransactionLineItems: (bookingData, listingId, isOwnListing) =>\n      dispatch(fetchTransactionLineItems(bookingData, listingId, isOwnListing)),\n  };\n};\n\nconst TransactionPage = compose(\n  withRouter,\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(TransactionPageComponent);\n\nexport default TransactionPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TransactionPage_root__E51Rc\",\"loading\":\"TransactionPage_loading__BnqWb\",\"error\":\"TransactionPage_error__1rKgg\",\"tabContent\":\"TransactionPage_tabContent__12lDI\",\"tabContentVisible\":\"TransactionPage_tabContentVisible__jHxbC\",\"footer\":\"TransactionPage_footer__1chun\"};"],"sourceRoot":""}