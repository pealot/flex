{"version":3,"sources":["containers/PaymentMethodsPage/PaymentMethodsPage.js","containers/PaymentMethodsPage/PaymentMethodsPage.module.css"],"names":["PaymentMethodsPageComponent","props","useState","isSubmitting","setIsSubmitting","cardState","setCardState","currentUser","addPaymentMethodError","deletePaymentMethodError","createStripeCustomerError","handleCardSetupError","deletePaymentMethodInProgress","onCreateSetupIntent","onHandleCardSetup","onSavePaymentMethod","onDeletePaymentMethod","fetchStripeCustomer","scrollingDisabled","onManageDisableScrolling","intl","stripeCustomerFetched","getClientSecret","setupIntent","attributes","clientSecret","getPaymentParams","formValues","name","addressLine1","addressLine2","postal","state","city","country","addressMaybe","address","line1","line2","postal_code","payment_method_data","billing_details","email","ensureCurrentUser","handleRemovePaymentMethod","then","title","formatMessage","id","ensuredCurrentUser","currentUserLoaded","hasDefaultPaymentMethod","ensureStripeCustomer","stripeCustomer","stripeCustomerId","ensurePaymentMethodCard","defaultPaymentMethod","initalValuesForStripePayment","profile","firstName","lastName","card","showForm","showCardDetails","currentPage","desktopClassName","css","desktopTopbar","mobileClassName","mobileTopbar","selectedPageName","currentTab","className","content","onChange","onDeleteCard","paymentForm","formId","initialValues","onSubmit","params","stripe","stripeParams","setupIntentClientSecret","paymentParams","result","newPaymentMethod","payment_method","catch","error","console","inProgress","defaultProps","PaymentMethodsPage","compose","connect","user","paymentMethods","isScrollingDisabled","dispatch","componentId","disableScrolling","manageDisableScrolling","handleCardSetup","createStripeSetupIntent","savePaymentMethod","deletePaymentMethod","injectIntl","module","exports"],"mappings":"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","file":"PaymentMethodsPage.bdb8f81b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { bool, func, object } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\nimport { ensureCurrentUser, ensureStripeCustomer, ensurePaymentMethodCard } from '../../util/data';\nimport { propTypes } from '../../util/types';\nimport { savePaymentMethod, deletePaymentMethod } from '../../ducks/paymentMethods.duck';\nimport { handleCardSetup } from '../../ducks/stripe.duck';\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/UI.duck';\nimport {\n  SavedCardDetails,\n  LayoutSideNavigation,\n  LayoutWrapperMain,\n  LayoutWrapperAccountSettingsSideNav,\n  LayoutWrapperTopbar,\n  LayoutWrapperFooter,\n  Footer,\n  Page,\n  UserNav,\n} from '../../components';\nimport { TopbarContainer } from '../../containers';\nimport { PaymentMethodsForm } from '../../forms';\nimport { createStripeSetupIntent, stripeCustomer } from './PaymentMethodsPage.duck.js';\n\nimport css from './PaymentMethodsPage.module.css';\n\nconst PaymentMethodsPageComponent = props => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [cardState, setCardState] = useState(null);\n\n  const {\n    currentUser,\n    addPaymentMethodError,\n    deletePaymentMethodError,\n    createStripeCustomerError,\n    handleCardSetupError,\n    deletePaymentMethodInProgress,\n    onCreateSetupIntent,\n    onHandleCardSetup,\n    onSavePaymentMethod,\n    onDeletePaymentMethod,\n    fetchStripeCustomer,\n    scrollingDisabled,\n    onManageDisableScrolling,\n    intl,\n    stripeCustomerFetched,\n  } = props;\n\n  const getClientSecret = setupIntent => {\n    return setupIntent && setupIntent.attributes ? setupIntent.attributes.clientSecret : null;\n  };\n  const getPaymentParams = (currentUser, formValues) => {\n    const { name, addressLine1, addressLine2, postal, state, city, country } = formValues;\n    const addressMaybe =\n      addressLine1 && postal\n        ? {\n            address: {\n              city: city,\n              country: country,\n              line1: addressLine1,\n              line2: addressLine2,\n              postal_code: postal,\n              state: state,\n            },\n          }\n        : {};\n    const billingDetails = {\n      name,\n      email: ensureCurrentUser(currentUser).attributes.email,\n      ...addressMaybe,\n    };\n\n    const paymentParams = {\n      payment_method_data: {\n        billing_details: billingDetails,\n      },\n    };\n\n    return paymentParams;\n  };\n\n  const handleSubmit = params => {\n    setIsSubmitting(true);\n    const ensuredCurrentUser = ensureCurrentUser(currentUser);\n    const stripeCustomer = ensuredCurrentUser.stripeCustomer;\n    const { stripe, card, formValues } = params;\n\n    onCreateSetupIntent()\n      .then(setupIntent => {\n        const stripeParams = {\n          stripe,\n          card,\n          setupIntentClientSecret: getClientSecret(setupIntent),\n          paymentParams: getPaymentParams(currentUser, formValues),\n        };\n\n        return onHandleCardSetup(stripeParams);\n      })\n      .then(result => {\n        const newPaymentMethod = result.setupIntent.payment_method;\n        // Note: stripe.handleCardSetup might return an error inside successful call (200), but those are rejected in thunk functions.\n\n        return onSavePaymentMethod(stripeCustomer, newPaymentMethod);\n      })\n      .then(() => {\n        // Update currentUser entity and its sub entities: stripeCustomer and defaultPaymentMethod\n        fetchStripeCustomer();\n        setIsSubmitting(false);\n        setCardState('default');\n      })\n      .catch(error => {\n        console.error(error);\n        setIsSubmitting(false);\n      });\n  };\n\n  const handleRemovePaymentMethod = () => {\n    onDeletePaymentMethod().then(() => {\n      fetchStripeCustomer();\n    });\n  };\n\n  const title = intl.formatMessage({ id: 'PaymentMethodsPage.title' });\n\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\n  const currentUserLoaded = !!ensuredCurrentUser.id;\n\n  const hasDefaultPaymentMethod =\n    currentUser &&\n    ensureStripeCustomer(currentUser.stripeCustomer).attributes.stripeCustomerId &&\n    ensurePaymentMethodCard(currentUser.stripeCustomer.defaultPaymentMethod).id;\n\n  // Get first and last name of the current user and use it in the StripePaymentForm to autofill the name field\n  const userName = currentUserLoaded\n    ? `${ensuredCurrentUser.attributes.profile.firstName} ${ensuredCurrentUser.attributes.profile.lastName}`\n    : null;\n\n  const initalValuesForStripePayment = { name: userName };\n\n  const card = hasDefaultPaymentMethod\n    ? ensurePaymentMethodCard(currentUser.stripeCustomer.defaultPaymentMethod).attributes.card\n    : null;\n\n  const showForm = cardState === 'replaceCard' || !hasDefaultPaymentMethod;\n  const showCardDetails = !!hasDefaultPaymentMethod;\n  return (\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\n      <LayoutSideNavigation>\n        <LayoutWrapperTopbar>\n          <TopbarContainer\n            currentPage=\"PaymentMethodsPage\"\n            desktopClassName={css.desktopTopbar}\n            mobileClassName={css.mobileTopbar}\n          />\n          <UserNav selectedPageName=\"PaymentMethodsPage\" />\n        </LayoutWrapperTopbar>\n        <LayoutWrapperAccountSettingsSideNav currentTab=\"PaymentMethodsPage\" />\n        <LayoutWrapperMain>\n          <div className={css.content}>\n            <h1 className={css.title}>\n              <FormattedMessage id=\"PaymentMethodsPage.heading\" />\n            </h1>\n            {!stripeCustomerFetched ? null : (\n              <>\n                {showCardDetails ? (\n                  <SavedCardDetails\n                    card={card}\n                    onManageDisableScrolling={onManageDisableScrolling}\n                    onChange={setCardState}\n                    onDeleteCard={handleRemovePaymentMethod}\n                    deletePaymentMethodInProgress={deletePaymentMethodInProgress}\n                  />\n                ) : null}\n                {showForm ? (\n                  <PaymentMethodsForm\n                    className={css.paymentForm}\n                    formId=\"PaymentMethodsForm\"\n                    initialValues={initalValuesForStripePayment}\n                    onSubmit={handleSubmit}\n                    handleRemovePaymentMethod={handleRemovePaymentMethod}\n                    hasDefaultPaymentMethod={hasDefaultPaymentMethod}\n                    addPaymentMethodError={addPaymentMethodError}\n                    deletePaymentMethodError={deletePaymentMethodError}\n                    createStripeCustomerError={createStripeCustomerError}\n                    handleCardSetupError={handleCardSetupError}\n                    inProgress={isSubmitting}\n                  />\n                ) : null}\n              </>\n            )}\n          </div>\n        </LayoutWrapperMain>\n        <LayoutWrapperFooter>\n          <Footer />\n        </LayoutWrapperFooter>\n      </LayoutSideNavigation>\n    </Page>\n  );\n};\n\nPaymentMethodsPageComponent.defaultProps = {\n  currentUser: null,\n  addPaymentMethodError: null,\n  deletePaymentMethodError: null,\n  createStripeCustomerError: null,\n  handleCardSetupError: null,\n};\n\nPaymentMethodsPageComponent.propTypes = {\n  currentUser: propTypes.currentUser,\n  scrollingDisabled: bool.isRequired,\n  addPaymentMethodError: object,\n  deletePaymentMethodError: object,\n  createStripeCustomerError: object,\n  handleCardSetupError: object,\n  onCreateSetupIntent: func.isRequired,\n  onHandleCardSetup: func.isRequired,\n  onSavePaymentMethod: func.isRequired,\n  onDeletePaymentMethod: func.isRequired,\n  fetchStripeCustomer: func.isRequired,\n\n  // from injectIntl\n  intl: intlShape.isRequired,\n};\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.user;\n\n  const {\n    deletePaymentMethodInProgress,\n    addPaymentMethodError,\n    deletePaymentMethodError,\n    createStripeCustomerError,\n  } = state.paymentMethods;\n\n  const { stripeCustomerFetched } = state.PaymentMethodsPage;\n\n  const { handleCardSetupError } = state.stripe;\n  return {\n    currentUser,\n    scrollingDisabled: isScrollingDisabled(state),\n    deletePaymentMethodInProgress,\n    addPaymentMethodError,\n    deletePaymentMethodError,\n    createStripeCustomerError,\n    handleCardSetupError,\n    stripeCustomerFetched,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onManageDisableScrolling: (componentId, disableScrolling) =>\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\n  fetchStripeCustomer: () => dispatch(stripeCustomer()),\n  onHandleCardSetup: params => dispatch(handleCardSetup(params)),\n  onCreateSetupIntent: params => dispatch(createStripeSetupIntent(params)),\n  onSavePaymentMethod: (stripeCustomer, newPaymentMethod) =>\n    dispatch(savePaymentMethod(stripeCustomer, newPaymentMethod)),\n  onDeletePaymentMethod: params => dispatch(deletePaymentMethod(params)),\n});\n\nconst PaymentMethodsPage = compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  injectIntl\n)(PaymentMethodsPageComponent);\n\nexport default PaymentMethodsPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"PaymentMethodsPage_content__MoVZb\",\"desktopTopbar\":\"PaymentMethodsPage_desktopTopbar__kjP3B\",\"mobileTopbar\":\"PaymentMethodsPage_mobileTopbar__15KoR\",\"title\":\"PaymentMethodsPage_title__pVxKg\"};"],"sourceRoot":""}